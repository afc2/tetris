
==================== FINAL INTERFACE ====================
2018-07-09 23:41:11.446726 UTC

interface my-project-0.1-3AQJKoNe6s17XdgyWrouvt:Tetris 8002
  interface hash: d01190d17cbb35df0de1e2bef0346050
  ABI hash: f012cc8e01209708022de39b76980cc2
  export-list hash: d5a00175e66693bf4f7f79242192b7e7
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 009bc392b00380b1d4fe4f5766b19262
  sig of: Nothing
  used TH splices: False
  where
exports:
  Tetris.alpha
  Tetris.angle
  Tetris.bl
  Tetris.blockSize
  Tetris.blockSizeFloat
  Tetris.boardMoveDown
  Tetris.chMoving
  Tetris.chRotation
  Tetris.chSpeedAndTime
  Tetris.chZ
  Tetris.collidesBlock
  Tetris.collidesBlockDown
  Tetris.collidesBlockDownSmooth
  Tetris.collidesBlockSides
  Tetris.collidesBlockSidesSmooth
  Tetris.collidesBlockSidesWhallLeft
  Tetris.collidesBlockSidesWhallRight
  Tetris.collidesBlockUp
  Tetris.collidesFigure
  Tetris.collidesFigureDown
  Tetris.collidesFigureDownSmooth
  Tetris.collidesFigureSides
  Tetris.collidesFigureSidesSmooth
  Tetris.collidesFigureSidesWallLeft
  Tetris.collidesFigureSidesWallRight
  Tetris.collidesFigureSmooth
  Tetris.conCircle
  Tetris.conCircleB
  Tetris.conRecMenu
  Tetris.conSmooth
  Tetris.cons
  Tetris.consCircBack
  Tetris.consCircBackTwo
  Tetris.deleteRows
  Tetris.drawBlock
  Tetris.drawBlockCircle
  Tetris.drawBlockCircleHelp
  Tetris.drawBlockedFigure
  Tetris.drawBlockedFigureCircle
  Tetris.drawBoard
  Tetris.drawBoardCircle
  Tetris.drawCircleBackGr
  Tetris.drawFigure
  Tetris.drawFigureCircle
  Tetris.drawRectanglBackGr
  Tetris.drawRectangleMenu
  Tetris.drawScore
  Tetris.drawTetris
  Tetris.drawTextConCircle
  Tetris.drawTextConSmooth
  Tetris.drawmenuCircle
  Tetris.drawmenuSmooth
  Tetris.drawtextCircle
  Tetris.drawtextSmooth
  Tetris.dropit
  Tetris.dropitSmooth
  Tetris.dropitStepped
  Tetris.extrSpeed
  Tetris.extrTime
  Tetris.fieldHeight
  Tetris.fieldWidth
  Tetris.figureToDraw
  Tetris.figureToDrawI
  Tetris.figureToDrawJ
  Tetris.figureToDrawL
  Tetris.figureToDrawO
  Tetris.figureToDrawS
  Tetris.figureToDrawT
  Tetris.figureToDrawZ
  Tetris.fromCoord
  Tetris.fromGS
  Tetris.genEmptyBoard
  Tetris.genFigure
  Tetris.genNewUniverse
  Tetris.genRow
  Tetris.genRows
  Tetris.genTetris
  Tetris.genUniverse
  Tetris.getc
  Tetris.getf
  Tetris.getrange
  Tetris.glob_fps
  Tetris.handleTetris
  Tetris.inintTactSmooth
  Tetris.inintTactStepped
  Tetris.initFigures
  Tetris.init_tact
  Tetris.isFullRow
  Tetris.isGameOver
  Tetris.lowerRows
  Tetris.magframe
  Tetris.minbl
  Tetris.mouseToCell
  Tetris.moveLeft
  Tetris.moveLeftSmoothRect
  Tetris.moveLeftSmoothRound
  Tetris.moveLeftSteppedRect
  Tetris.moveLeftSteppedRound
  Tetris.moveRight
  Tetris.moveRightSmoothRect
  Tetris.moveRightSmoothRound
  Tetris.moveRightSteppedRect
  Tetris.moveRightSteppedRound
  Tetris.mul8or9
  Tetris.myscale
  Tetris.newLevel
  Tetris.newTact
  Tetris.newTactSmooth
  Tetris.newTactStepped
  Tetris.numtocolor
  Tetris.offsedge
  Tetris.offset2
  Tetris.onMoveButton
  Tetris.onTypeButton
  Tetris.pause
  Tetris.plbl
  Tetris.plbly
  Tetris.pldtSpeedAndTime
  Tetris.ploy
  Tetris.rect
  Tetris.rest
  Tetris.roundedRect
  Tetris.row
  Tetris.run
  Tetris.scalCirclB
  Tetris.scaleBackGr
  Tetris.scaleBackGrTwo
  Tetris.scaleSc
  Tetris.scaleT
  Tetris.scaleTSmooth
  Tetris.screenHeight
  Tetris.screenHeightFloat
  Tetris.screenHeightreal
  Tetris.screenWidth
  Tetris.screenWidthFloat
  Tetris.screenWidthreal
  Tetris.sizefit
  Tetris.sizefitInt
  Tetris.sortRows
  Tetris.specangel
  Tetris.switchTetrisMove
  Tetris.switchTetrisType
  Tetris.tetrMoveButton
  Tetris.tetrTypbutton
  Tetris.tetrispause
  Tetris.thicknessOne
  Tetris.thicknessTwo
  Tetris.toCoord
  Tetris.toGS
  Tetris.tranRectCon
  Tetris.tranRectConThree
  Tetris.tranRectConTwo
  Tetris.transCircleBack
  Tetris.transl
  Tetris.translMenu
  Tetris.translMenu2
  Tetris.translateT
  Tetris.transtBackGround
  Tetris.turn
  Tetris.turnRound
  Tetris.turnSmooth
  Tetris.turnStepped
  Tetris.updateBoard
  Tetris.updateTetris
  Tetris.updateTetrisSmooth
  Tetris.updateTetrisStepped
  Tetris.upperRows
  Tetris.vectolist
  Tetris.Block{Tetris.Free Tetris.Full}
  Tetris.BlockedFigure
  Tetris.Board
  Tetris.Coord{Tetris.Coord clr x y}
  Tetris.Coord1
  Tetris.Direction{Tetris.DDown Tetris.DLeft Tetris.DRight Tetris.DUp}
  Tetris.Figure{Tetris.Figure}
  Tetris.FigureType{Tetris.I Tetris.J Tetris.L Tetris.O Tetris.S Tetris.T Tetris.Z}
  Tetris.GameState{Tetris.GameState board figure score speedandtime tactgamestate typemoving typerepres}
  Tetris.Gamestate
  Tetris.Row
  Tetris.Score
  Tetris.Speed
  Tetris.TetrisMove{Tetris.TetrisSmooth Tetris.TetrisStepped}
  Tetris.TetrisType{Tetris.TetrisRect Tetris.TetrisRound}
  Tetris.Time
module dependencies:
package dependencies: GLURaw-2.0.0.3@GLURaw-2.0.0.3-G12M6COyQIU5WfRlrIwPuj
                      GLUT-2.7.0.11@GLUT-2.7.0.11-IP0PzJz4wI8KYXyKTnttpl
                      ObjectName-1.1.0.1@ObjectName-1.1.0.1-EiFOWjUQWWuLyOhtrmuIWX
                      OpenGL-3.0.1.0@OpenGL-3.0.1.0-BckrJgI63aX3I0VRJxU6fY
                      OpenGLRaw-3.2.4.0@OpenGLRaw-3.2.4.0-JDyGgOXR61GG549SwmWm2Q
                      StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bmp-1.2.6.3@bmp-1.2.6.3-43OLkH0uuwm831pBFpx2PZ
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fixed-0.2.1.1@fixed-0.2.1.1-8Jr82l0kss5Gr4nEevmXlZ ghc-prim-0.5.0.0
                      gloss-1.10.2.5@gloss-1.10.2.5-Cjq2LIsB60XBDXiLGr6ISz
                      gloss-rendering-1.10.3.5@gloss-rendering-1.10.3.5-4njwxhM0L51DDTj3f5QCty
                      half-0.2.2.3@half-0.2.2.3-GHJ372Ls7FBA3PAGtGHfOR
                      integer-gmp-1.0.0.1 random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      time-1.6.0.1@time-1.6.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         gloss-rendering-1.10.3.5@gloss-rendering-1.10.3.5-4njwxhM0L51DDTj3f5QCty:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  gloss-1.10.2.5@gloss-1.10.2.5-Cjq2LIsB60XBDXiLGr6ISz:Graphics.Gloss.Data.Color 35f09dcf5824a501e40cfcf03326b2bc
import  -/  gloss-1.10.2.5@gloss-1.10.2.5-Cjq2LIsB60XBDXiLGr6ISz:Graphics.Gloss.Data.Display 5392242cf7ec93ea58fa9cb1cc259a3f
import  -/  gloss-1.10.2.5@gloss-1.10.2.5-Cjq2LIsB60XBDXiLGr6ISz:Graphics.Gloss.Data.Picture 32f91608a8bdee9c0064dc93458da74d
import  -/  gloss-1.10.2.5@gloss-1.10.2.5-Cjq2LIsB60XBDXiLGr6ISz:Graphics.Gloss.Interface.Pure.Game be6648623dab4cd05adca729116749e9
import  -/  gloss-1.10.2.5@gloss-1.10.2.5-Cjq2LIsB60XBDXiLGr6ISz:Graphics.Gloss.Internals.Interface.Backend.Types 132a27a009994a72df34599aa7eddcec
import  -/  gloss-1.10.2.5@gloss-1.10.2.5-Cjq2LIsB60XBDXiLGr6ISz:Graphics.Gloss.Internals.Interface.Event 497e82185fdb8b44e516b3e985181648
import  -/  gloss-rendering-1.10.3.5@gloss-rendering-1.10.3.5-4njwxhM0L51DDTj3f5QCty:Graphics.Gloss.Internals.Data.Color c7f4489ea5845b6a0cecc4ca67df4795
import  -/  gloss-rendering-1.10.3.5@gloss-rendering-1.10.3.5-4njwxhM0L51DDTj3f5QCty:Graphics.Gloss.Internals.Data.Picture 3d5505e5475c47508e052579dd4056bf
import  -/  random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog:System.Random cc3ef358c669b194cf9fe94db6f2430f
fbddc14171e357b5bfc2e9506a6efcbd
  $fEqBlock :: GHC.Classes.Eq Tetris.Block
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Tetris.Block Tetris.$fEqBlock_$c== Tetris.$fEqBlock_$c/= -}
fbddc14171e357b5bfc2e9506a6efcbd
  $fEqBlock_$c/= :: Tetris.Block -> Tetris.Block -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Tetris.Block) (b :: Tetris.Block) ->
                 case a of wild {
                   Tetris.Free
                   -> case b of wild1 {
                        Tetris.Free -> GHC.Types.False Tetris.Full -> GHC.Types.True }
                   Tetris.Full
                   -> case b of wild1 {
                        Tetris.Free -> GHC.Types.True
                        Tetris.Full -> GHC.Types.False } }) -}
fbddc14171e357b5bfc2e9506a6efcbd
  $fEqBlock_$c== :: Tetris.Block -> Tetris.Block -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Tetris.Block) (ds1 :: Tetris.Block) ->
                 case ds of wild {
                   Tetris.Free
                   -> case ds1 of wild1 {
                        Tetris.Free -> GHC.Types.True Tetris.Full -> GHC.Types.False }
                   Tetris.Full
                   -> case ds1 of wild1 {
                        Tetris.Free -> GHC.Types.False
                        Tetris.Full -> GHC.Types.True } }) -}
0490230f3d1931c049a1bd91d0deb018
  $fEqDirection :: GHC.Classes.Eq Tetris.Direction
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Tetris.Direction
                  Tetris.$fEqDirection_$c==
                  Tetris.$fEqDirection_$c/= -}
0490230f3d1931c049a1bd91d0deb018
  $fEqDirection_$c/= ::
    Tetris.Direction -> Tetris.Direction -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Tetris.Direction) (b :: Tetris.Direction) ->
                 case a of wild {
                   Tetris.DUp
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Tetris.DUp -> GHC.Types.False }
                   Tetris.DDown
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Tetris.DDown -> GHC.Types.False }
                   Tetris.DLeft
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Tetris.DLeft -> GHC.Types.False }
                   Tetris.DRight
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Tetris.DRight -> GHC.Types.False } }) -}
0490230f3d1931c049a1bd91d0deb018
  $fEqDirection_$c== ::
    Tetris.Direction -> Tetris.Direction -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Tetris.Direction) (ds1 :: Tetris.Direction) ->
                 case ds of wild {
                   Tetris.DUp
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Tetris.DUp -> GHC.Types.True }
                   Tetris.DDown
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Tetris.DDown -> GHC.Types.True }
                   Tetris.DLeft
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Tetris.DLeft -> GHC.Types.True }
                   Tetris.DRight
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Tetris.DRight -> GHC.Types.True } }) -}
c71af956c94de50ad57659cad7749b33
  $fEqFigureType :: GHC.Classes.Eq Tetris.FigureType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Tetris.FigureType
                  Tetris.$fEqFigureType_$c==
                  Tetris.$fEqFigureType_$c/= -}
c71af956c94de50ad57659cad7749b33
  $fEqFigureType_$c/= ::
    Tetris.FigureType -> Tetris.FigureType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Tetris.FigureType) (b :: Tetris.FigureType) ->
                 case a of wild {
                   Tetris.O
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Tetris.O -> GHC.Types.False }
                   Tetris.I
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Tetris.I -> GHC.Types.False }
                   Tetris.T
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Tetris.T -> GHC.Types.False }
                   Tetris.J
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Tetris.J -> GHC.Types.False }
                   Tetris.L
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Tetris.L -> GHC.Types.False }
                   Tetris.S
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Tetris.S -> GHC.Types.False }
                   Tetris.Z
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Tetris.Z -> GHC.Types.False } }) -}
c71af956c94de50ad57659cad7749b33
  $fEqFigureType_$c== ::
    Tetris.FigureType -> Tetris.FigureType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Tetris.FigureType)
                   (ds1 :: Tetris.FigureType) ->
                 case ds of wild {
                   Tetris.O
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Tetris.O -> GHC.Types.True }
                   Tetris.I
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Tetris.I -> GHC.Types.True }
                   Tetris.T
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Tetris.T -> GHC.Types.True }
                   Tetris.J
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Tetris.J -> GHC.Types.True }
                   Tetris.L
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Tetris.L -> GHC.Types.True }
                   Tetris.S
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Tetris.S -> GHC.Types.True }
                   Tetris.Z
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Tetris.Z -> GHC.Types.True } }) -}
d6d18b6693bd687e744eb7459cdfcfe3
  $fEqTetrisMove :: GHC.Classes.Eq Tetris.TetrisMove
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Tetris.TetrisMove
                  Tetris.$fEqTetrisMove_$c==
                  Tetris.$fEqTetrisMove_$c/= -}
d6d18b6693bd687e744eb7459cdfcfe3
  $fEqTetrisMove_$c/= ::
    Tetris.TetrisMove -> Tetris.TetrisMove -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Tetris.TetrisMove) (b :: Tetris.TetrisMove) ->
                 case a of wild {
                   Tetris.TetrisStepped
                   -> case b of wild1 {
                        Tetris.TetrisStepped -> GHC.Types.False
                        Tetris.TetrisSmooth -> GHC.Types.True }
                   Tetris.TetrisSmooth
                   -> case b of wild1 {
                        Tetris.TetrisStepped -> GHC.Types.True
                        Tetris.TetrisSmooth -> GHC.Types.False } }) -}
d6d18b6693bd687e744eb7459cdfcfe3
  $fEqTetrisMove_$c== ::
    Tetris.TetrisMove -> Tetris.TetrisMove -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Tetris.TetrisMove) (ds1 :: Tetris.TetrisMove) ->
                 case ds of wild {
                   Tetris.TetrisStepped
                   -> case ds1 of wild1 {
                        Tetris.TetrisStepped -> GHC.Types.True
                        Tetris.TetrisSmooth -> GHC.Types.False }
                   Tetris.TetrisSmooth
                   -> case ds1 of wild1 {
                        Tetris.TetrisStepped -> GHC.Types.False
                        Tetris.TetrisSmooth -> GHC.Types.True } }) -}
8de7e6d32445e729c0692b7207d9b96f
  $fEqTetrisType :: GHC.Classes.Eq Tetris.TetrisType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Tetris.TetrisType
                  Tetris.$fEqTetrisType_$c==
                  Tetris.$fEqTetrisType_$c/= -}
8de7e6d32445e729c0692b7207d9b96f
  $fEqTetrisType_$c/= ::
    Tetris.TetrisType -> Tetris.TetrisType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Tetris.TetrisType) (b :: Tetris.TetrisType) ->
                 case a of wild {
                   Tetris.TetrisRect
                   -> case b of wild1 {
                        Tetris.TetrisRect -> GHC.Types.False
                        Tetris.TetrisRound -> GHC.Types.True }
                   Tetris.TetrisRound
                   -> case b of wild1 {
                        Tetris.TetrisRect -> GHC.Types.True
                        Tetris.TetrisRound -> GHC.Types.False } }) -}
8de7e6d32445e729c0692b7207d9b96f
  $fEqTetrisType_$c== ::
    Tetris.TetrisType -> Tetris.TetrisType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Tetris.TetrisType) (ds1 :: Tetris.TetrisType) ->
                 case ds of wild {
                   Tetris.TetrisRect
                   -> case ds1 of wild1 {
                        Tetris.TetrisRect -> GHC.Types.True
                        Tetris.TetrisRound -> GHC.Types.False }
                   Tetris.TetrisRound
                   -> case ds1 of wild1 {
                        Tetris.TetrisRect -> GHC.Types.False
                        Tetris.TetrisRound -> GHC.Types.True } }) -}
fbddc14171e357b5bfc2e9506a6efcbd
  $fShowBlock :: GHC.Show.Show Tetris.Block
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Tetris.Block
                  Tetris.$fShowBlock_$cshowsPrec
                  Tetris.$fShowBlock_$cshow
                  Tetris.$fShowBlock_$cshowList -}
fbddc14171e357b5bfc2e9506a6efcbd
  $fShowBlock1 :: Tetris.Block -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Tetris.Block) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Tetris.Free
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Tetris.$fShowBlock3)
                        eta
                   Tetris.Full
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Tetris.$fShowBlock2)
                        eta }) -}
0de417e921b8be0fac0fd0fa7b93bebb
  $fShowBlock2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Full"#) -}
0911f8a04ec06bcb4a17c1a17b8525bc
  $fShowBlock3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Free"#) -}
fbddc14171e357b5bfc2e9506a6efcbd
  $fShowBlock_$cshow :: Tetris.Block -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x1 :: Tetris.Block) ->
                 case x1 of wild {
                   Tetris.Free -> Tetris.$fShowBlock3
                   Tetris.Full -> Tetris.$fShowBlock2 }) -}
fbddc14171e357b5bfc2e9506a6efcbd
  $fShowBlock_$cshowList :: [Tetris.Block] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Tetris.Block
                   Tetris.$fShowBlock1) -}
fbddc14171e357b5bfc2e9506a6efcbd
  $fShowBlock_$cshowsPrec ::
    GHC.Types.Int -> Tetris.Block -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Tetris.Block)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Tetris.Free
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Tetris.$fShowBlock3)
                        eta
                   Tetris.Full
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Tetris.$fShowBlock2)
                        eta }) -}
0490230f3d1931c049a1bd91d0deb018
  $fShowDirection :: GHC.Show.Show Tetris.Direction
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Tetris.Direction
                  Tetris.$fShowDirection_$cshowsPrec
                  Tetris.$fShowDirection_$cshow
                  Tetris.$fShowDirection_$cshowList -}
fbf5923e0f19281a199244360bda1b75
  $fShowDirection1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DRight"#) -}
53fdc6a1a2230723555cec90069c90ea
  $fShowDirection2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DLeft"#) -}
0814c8a1c417d961fa8611469be2eb6e
  $fShowDirection3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DDown"#) -}
89b6fb23a9afc0c3ecc76d6d75d88860
  $fShowDirection4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DUp"#) -}
0490230f3d1931c049a1bd91d0deb018
  $fShowDirection_$cshow :: Tetris.Direction -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x1 :: Tetris.Direction) ->
                 Tetris.$fShowDirection_$cshowsPrec
                   GHC.Show.shows22
                   x1
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0490230f3d1931c049a1bd91d0deb018
  $fShowDirection_$cshowList :: [Tetris.Direction] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Tetris.Direction
                   Tetris.$w$cshowsPrec) -}
0490230f3d1931c049a1bd91d0deb018
  $fShowDirection_$cshowsPrec ::
    GHC.Types.Int -> Tetris.Direction -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w4 :: Tetris.Direction)
                   (w5 :: GHC.Base.String) ->
                 Tetris.$w$cshowsPrec w4 w5) -}
c71af956c94de50ad57659cad7749b33
  $fShowFigureType :: GHC.Show.Show Tetris.FigureType
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Tetris.FigureType
                  Tetris.$fShowFigureType_$cshowsPrec
                  Tetris.$fShowFigureType_$cshow
                  Tetris.$fShowFigureType_$cshowList -}
64db436893880ca737a4b3535c940c75
  $fShowFigureType1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Z"#) -}
0847f541ad123bf8952fc2fb99519558
  $fShowFigureType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "S"#) -}
df3c89bdc8cc1f51e9193bc30632eb17
  $fShowFigureType3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "L"#) -}
5e8cc276cea1882f3e7e312f29c237d0
  $fShowFigureType4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "J"#) -}
d9fd5b1e2ccee8615d1185c8eb08b395
  $fShowFigureType5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "T"#) -}
ced3d50b2a02698d867662a53064e1e9
  $fShowFigureType6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "I"#) -}
7793af1f76a740dadbb05e8755e96827
  $fShowFigureType7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "O"#) -}
c71af956c94de50ad57659cad7749b33
  $fShowFigureType_$cshow :: Tetris.FigureType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x1 :: Tetris.FigureType) ->
                 Tetris.$fShowFigureType_$cshowsPrec
                   GHC.Show.shows22
                   x1
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c71af956c94de50ad57659cad7749b33
  $fShowFigureType_$cshowList ::
    [Tetris.FigureType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Tetris.FigureType
                   Tetris.$w$cshowsPrec1) -}
c71af956c94de50ad57659cad7749b33
  $fShowFigureType_$cshowsPrec ::
    GHC.Types.Int -> Tetris.FigureType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w4 :: Tetris.FigureType)
                   (w5 :: GHC.Base.String) ->
                 Tetris.$w$cshowsPrec1 w4 w5) -}
d6d18b6693bd687e744eb7459cdfcfe3
  $fShowTetrisMove :: GHC.Show.Show Tetris.TetrisMove
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Tetris.TetrisMove
                  Tetris.$fShowTetrisMove_$cshowsPrec
                  Tetris.$fShowTetrisMove_$cshow
                  Tetris.$fShowTetrisMove_$cshowList -}
d6d18b6693bd687e744eb7459cdfcfe3
  $fShowTetrisMove1 :: Tetris.TetrisMove -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Tetris.TetrisMove) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Tetris.TetrisStepped
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Tetris.$fShowTetrisMove3)
                        eta
                   Tetris.TetrisSmooth
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Tetris.$fShowTetrisMove2)
                        eta }) -}
dc116a32f11b4567ad3b268473912045
  $fShowTetrisMove2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TetrisSmooth"#) -}
5174b6435ff9a32d2cd2cf0cb8b4fe3b
  $fShowTetrisMove3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TetrisStepped"#) -}
d6d18b6693bd687e744eb7459cdfcfe3
  $fShowTetrisMove_$cshow :: Tetris.TetrisMove -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x1 :: Tetris.TetrisMove) ->
                 case x1 of wild {
                   Tetris.TetrisStepped -> Tetris.$fShowTetrisMove3
                   Tetris.TetrisSmooth -> Tetris.$fShowTetrisMove2 }) -}
d6d18b6693bd687e744eb7459cdfcfe3
  $fShowTetrisMove_$cshowList ::
    [Tetris.TetrisMove] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Tetris.TetrisMove
                   Tetris.$fShowTetrisMove1) -}
d6d18b6693bd687e744eb7459cdfcfe3
  $fShowTetrisMove_$cshowsPrec ::
    GHC.Types.Int -> Tetris.TetrisMove -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Tetris.TetrisMove)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Tetris.TetrisStepped
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Tetris.$fShowTetrisMove3)
                        eta
                   Tetris.TetrisSmooth
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Tetris.$fShowTetrisMove2)
                        eta }) -}
8de7e6d32445e729c0692b7207d9b96f
  $fShowTetrisType :: GHC.Show.Show Tetris.TetrisType
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Tetris.TetrisType
                  Tetris.$fShowTetrisType_$cshowsPrec
                  Tetris.$fShowTetrisType_$cshow
                  Tetris.$fShowTetrisType_$cshowList -}
8de7e6d32445e729c0692b7207d9b96f
  $fShowTetrisType1 :: Tetris.TetrisType -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Tetris.TetrisType) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Tetris.TetrisRect
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Tetris.$fShowTetrisType3)
                        eta
                   Tetris.TetrisRound
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Tetris.$fShowTetrisType2)
                        eta }) -}
4fb7be46a01901ad768f2c91ac2e9f47
  $fShowTetrisType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TetrisRound"#) -}
d65c6ef2b5dd70d30a724a1b5d22411e
  $fShowTetrisType3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TetrisRect"#) -}
8de7e6d32445e729c0692b7207d9b96f
  $fShowTetrisType_$cshow :: Tetris.TetrisType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x1 :: Tetris.TetrisType) ->
                 case x1 of wild {
                   Tetris.TetrisRect -> Tetris.$fShowTetrisType3
                   Tetris.TetrisRound -> Tetris.$fShowTetrisType2 }) -}
8de7e6d32445e729c0692b7207d9b96f
  $fShowTetrisType_$cshowList ::
    [Tetris.TetrisType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Tetris.TetrisType
                   Tetris.$fShowTetrisType1) -}
8de7e6d32445e729c0692b7207d9b96f
  $fShowTetrisType_$cshowsPrec ::
    GHC.Types.Int -> Tetris.TetrisType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Tetris.TetrisType)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Tetris.TetrisRect
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Tetris.$fShowTetrisType3)
                        eta
                   Tetris.TetrisRound
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Tetris.$fShowTetrisType2)
                        eta }) -}
d077199a7aeab6712cc12cfd53f1bfb0
  $tc'Coord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9164153813779222767##
                   12672950478861621231##
                   Tetris.$trModule
                   Tetris.$tc'Coord1) -}
83b24284ba86e20f30199d609d14e653
  $tc'Coord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Coord"#) -}
bbcd10928d0cc47f4b3a897abf9f5273
  $tc'DDown :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17413433274298082537##
                   799073244933432891##
                   Tetris.$trModule
                   Tetris.$tc'DDown1) -}
a30eee10b2471bda3d2cd4d0d8245fc4
  $tc'DDown1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DDown"#) -}
4d1855a5633682a341191e6e0dd01672
  $tc'DLeft :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16557021671630992800##
                   3831214934960310606##
                   Tetris.$trModule
                   Tetris.$tc'DLeft1) -}
a46d6249f53349969ced4c417bef3773
  $tc'DLeft1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DLeft"#) -}
22a3ab5ebab8614dd18615e600aa5981
  $tc'DRight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16200848482820208150##
                   12715176549121261792##
                   Tetris.$trModule
                   Tetris.$tc'DRight1) -}
33e7be0d589ed155a459f8f66a7cf21f
  $tc'DRight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DRight"#) -}
0f67cb870eb167c4e8a79dad841c54d6
  $tc'DUp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18151904251629972282##
                   10521101006077575495##
                   Tetris.$trModule
                   Tetris.$tc'DUp1) -}
95d0b4c37d55be650c9cc242d38acede
  $tc'DUp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DUp"#) -}
56e9c1e3f2f74943ca3b3a45d0b76b19
  $tc'Figure :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3850540269315212495##
                   8093301220617434433##
                   Tetris.$trModule
                   Tetris.$tc'Figure1) -}
f7a6e7a881ca48a93c91523268717e29
  $tc'Figure1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Figure"#) -}
34a4347eecaf67a374fe71df7d72bb0e
  $tc'Free :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6333055031669069413##
                   1286201037331384864##
                   Tetris.$trModule
                   Tetris.$tc'Free1) -}
123bebd68988973bfa276262815f6879
  $tc'Free1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Free"#) -}
5b4b4a31a0b7d2daf81d8f7d5ebe0d4b
  $tc'Full :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15995229166564844657##
                   8296557453356478690##
                   Tetris.$trModule
                   Tetris.$tc'Full1) -}
2b8e4f3f586e79fe70662f48534174ee
  $tc'Full1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Full"#) -}
ec73dcd6a046307899e7a43b8b4f111c
  $tc'GameState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10804589571643213283##
                   1010661642326847239##
                   Tetris.$trModule
                   Tetris.$tc'GameState1) -}
2cc0183e6338f271f9fce2bd082f3fd0
  $tc'GameState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GameState"#) -}
91715fb730987e65c2885b36d461568a
  $tc'I :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12680135132528560995##
                   1761180930346293435##
                   Tetris.$trModule
                   Tetris.$tc'I1) -}
3e872bfdc03a467f9a56404e988e77a8
  $tc'I1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'I"#) -}
0c556eae0d856b442dbb9866408f7ff2
  $tc'J :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7622625914213815785##
                   7906758258704830687##
                   Tetris.$trModule
                   Tetris.$tc'J1) -}
90c0ca74864ee7051d3c25aad7ff0298
  $tc'J1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'J"#) -}
69f19b122a3b5db7c76f5ac0f995ffda
  $tc'L :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   174916033888649356##
                   18409656794264464889##
                   Tetris.$trModule
                   Tetris.$tc'L1) -}
b685cbf1bc62dcfe5c6f3483a46d7980
  $tc'L1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'L"#) -}
77532c941c711141c971726657cbbed7
  $tc'O :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   238840200671404563##
                   16246898072731654733##
                   Tetris.$trModule
                   Tetris.$tc'O1) -}
024e2b9fc8c35c074733afe418234efc
  $tc'O1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'O"#) -}
f24fd0925abbf6353c69d63f079e2838
  $tc'S :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18340994484558887884##
                   6672886431298757983##
                   Tetris.$trModule
                   Tetris.$tc'S1) -}
a251e153bbc3ab141972481ecdfbd399
  $tc'S1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'S"#) -}
f5254c7ef34c293470bd522adac88e0f
  $tc'T :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13244999965110585039##
                   11432442504031651945##
                   Tetris.$trModule
                   Tetris.$tc'T1) -}
5d5e93735125b4c1f5d76e576c9219e6
  $tc'T1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'T"#) -}
97f93ed8800d5fd464128021ecc730f8
  $tc'TetrisRect :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2024208242547306108##
                   6141625266867385954##
                   Tetris.$trModule
                   Tetris.$tc'TetrisRect1) -}
15cf2a8ac263035aefceeb3c5dac7e27
  $tc'TetrisRect1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TetrisRect"#) -}
9341237d049a1737de104f6dbec2012a
  $tc'TetrisRound :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14652609018006818397##
                   14585915109337279690##
                   Tetris.$trModule
                   Tetris.$tc'TetrisRound1) -}
d4211f95a9d8cd441435df80b19c40d0
  $tc'TetrisRound1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TetrisRound"#) -}
26e85d74ec3ce9e824eeb8bc8088a706
  $tc'TetrisSmooth :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17736640986670118039##
                   10262098484055008260##
                   Tetris.$trModule
                   Tetris.$tc'TetrisSmooth1) -}
c718c6b9d6abe824898f19e49eea30cf
  $tc'TetrisSmooth1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TetrisSmooth"#) -}
b3750f6c5816c7939432fea0454a7cd7
  $tc'TetrisStepped :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5266562898880068295##
                   1070203356061525805##
                   Tetris.$trModule
                   Tetris.$tc'TetrisStepped1) -}
bdf0bf316e6add6429e564adbde437ba
  $tc'TetrisStepped1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TetrisStepped"#) -}
7dfc3115773fad95f4b8b96345624d71
  $tc'Z :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17703029248757189031##
                   8267673431504756122##
                   Tetris.$trModule
                   Tetris.$tc'Z1) -}
cd068487f894f8d7b2fdbb06535564a3
  $tc'Z1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Z"#) -}
65868abe5caad449e00e0873984ef328
  $tcBlock :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12294864215581992580##
                   966735473189049337##
                   Tetris.$trModule
                   Tetris.$tcBlock1) -}
268164557930dd80e6ebef8abe346b47
  $tcBlock1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Block"#) -}
6d2a6620f3e321cb6a79d5c89bc999e5
  $tcCoord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14548537213782533438##
                   12215404755769196959##
                   Tetris.$trModule
                   Tetris.$tcCoord1) -}
3239b581c8edeba21111e36dee0fb977
  $tcCoord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Coord"#) -}
75a632dfbdb242c9c0264989a4423daa
  $tcDirection :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17020593386804660974##
                   15916609181317506753##
                   Tetris.$trModule
                   Tetris.$tcDirection1) -}
dae79afb2170661f8923693b8643f549
  $tcDirection1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Direction"#) -}
0517476eaf34d052a38d7db2e45e4cea
  $tcFigure :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4233525995058262442##
                   12047927600698119927##
                   Tetris.$trModule
                   Tetris.$tcFigure1) -}
9bbd12a7573f1a9faef7a4ee67d5aa47
  $tcFigure1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Figure"#) -}
d8a8756f09e3f1464b5e5598a077cb3c
  $tcFigureType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7147982146102963806##
                   9513568789563366784##
                   Tetris.$trModule
                   Tetris.$tcFigureType1) -}
35f0a5ae32f1d9e9c87e38471277d4ed
  $tcFigureType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FigureType"#) -}
977379c0c77f27f9455cf8ba2945cd92
  $tcGameState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9231685219213068769##
                   6626929468505544687##
                   Tetris.$trModule
                   Tetris.$tcGameState1) -}
658e84f552cbde7e3056caf6d4978af2
  $tcGameState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "GameState"#) -}
1939999dd266960303d1c878d5d75afe
  $tcTetrisMove :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1808759529444651648##
                   6470151372223157877##
                   Tetris.$trModule
                   Tetris.$tcTetrisMove1) -}
9a3b57b443a49ec2e402c1ad7b34ec1c
  $tcTetrisMove1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TetrisMove"#) -}
909531f86c2e8fa6f237c1443abad4e2
  $tcTetrisType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5567060753671426728##
                   13982950131816065288##
                   Tetris.$trModule
                   Tetris.$tcTetrisType1) -}
0b9ee534b402503afd810c2ecd9a32cc
  $tcTetrisType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TetrisType"#) -}
0ccc76c5fe6c8ad34b95fe549bcce4f9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Tetris.$trModule2
                   Tetris.$trModule1) -}
e5ee7eb3c924e8b03fc48ba1492deace
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Tetris"#) -}
f01486155d31f5298ccb63c64605319e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "my-project-0.1-3AQJKoNe6s17XdgyWrouvt"#) -}
0490230f3d1931c049a1bd91d0deb018
  $w$cshowsPrec ::
    Tetris.Direction -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Tetris.Direction) (w4 :: GHC.Base.String) ->
                 case w of wild {
                   Tetris.DUp
                   -> GHC.Base.++ @ GHC.Types.Char Tetris.$fShowDirection4 w4
                   Tetris.DDown
                   -> GHC.Base.++ @ GHC.Types.Char Tetris.$fShowDirection3 w4
                   Tetris.DLeft
                   -> GHC.Base.++ @ GHC.Types.Char Tetris.$fShowDirection2 w4
                   Tetris.DRight
                   -> GHC.Base.++ @ GHC.Types.Char Tetris.$fShowDirection1 w4 }) -}
c71af956c94de50ad57659cad7749b33
  $w$cshowsPrec1 ::
    Tetris.FigureType -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Tetris.FigureType) (w4 :: GHC.Base.String) ->
                 case w of wild {
                   Tetris.O
                   -> GHC.Base.++ @ GHC.Types.Char Tetris.$fShowFigureType7 w4
                   Tetris.I
                   -> GHC.Base.++ @ GHC.Types.Char Tetris.$fShowFigureType6 w4
                   Tetris.T
                   -> GHC.Base.++ @ GHC.Types.Char Tetris.$fShowFigureType5 w4
                   Tetris.J
                   -> GHC.Base.++ @ GHC.Types.Char Tetris.$fShowFigureType4 w4
                   Tetris.L
                   -> GHC.Base.++ @ GHC.Types.Char Tetris.$fShowFigureType3 w4
                   Tetris.S
                   -> GHC.Base.++ @ GHC.Types.Char Tetris.$fShowFigureType2 w4
                   Tetris.Z
                   -> GHC.Base.++ @ GHC.Types.Char Tetris.$fShowFigureType1 w4 }) -}
01bb06eabde0bf42deab18847602a67c
  $wbl ::
    Tetris.FigureType
    -> Tetris.Direction
    -> Tetris.Coord
    -> (# Tetris.FigureType, Tetris.Direction, Tetris.Coord #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><L,1*U(A,U,U)>,
     Inline: [0] -}
71c6966208d61e0c1059a07a9b59720a
  $wcollidesBlock :: GHC.Prim.Int# -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww 0#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.># (GHC.Prim.+# ww 30#) 300#) of wild1 {
                        GHC.Types.False
                        -> case ww1 of wild2 { GHC.Types.I# x1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x1 0#) of wild3 {
                             GHC.Types.False
                             -> GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># (GHC.Prim.+# x1 30#) 600#)
                             GHC.Types.True -> GHC.Types.True } }
                        GHC.Types.True -> GHC.Types.True }
                   GHC.Types.True -> GHC.Types.True }) -}
3edc6e3fac4d170ff16c3840b828bd4a
  $wcollidesBlockDown ::
    GHC.Types.Int -> GHC.Prim.Int# -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U)><S,U><S,1*U>,
     Inline: [0] -}
15bce8612fdc2704f3443b4815a86922
  $wcollidesBlockDownSmooth ::
    GHC.Types.Int -> GHC.Prim.Int# -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U)><S,U><S,1*U>,
     Inline: [0] -}
2145a1802c10fa93daf228dfc894c341
  $wcollidesBlockSides ::
    GHC.Prim.Int# -> GHC.Types.Int -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U(U)><S,1*U>,
     Inline: [0] -}
7bd6c038ceb3083a90fb4297740ec5d3
  $wcollidesBlockSidesSmooth ::
    GHC.Prim.Int# -> GHC.Types.Int -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U(U)><S,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (w :: Tetris.Board) ->
                 case w of wild {
                   []
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# ww 0#) of wild1 {
                        GHC.Types.False
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.># (GHC.Prim.+# ww 30#) 300#)
                        GHC.Types.True -> GHC.Types.True }
                   : u1 ds
                   -> case ds of wild1 {
                        []
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# ww 0#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.># (GHC.Prim.+# ww 30#) 300#) of wild3 {
                                  GHC.Types.False
                                  -> case u1 of wild4 { Tetris.Coord ds1 ds2 ds3 ->
                                     case ds1 of wild5 { GHC.Types.I# y1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.==# ww y1) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> case ww1 of wild7 { GHC.Types.I# x1 ->
                                          case ds2 of wild8 { GHC.Types.I# y2 ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# x1 y2) of wild9 {
                                            GHC.Types.False
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.>#
                                                         x1
                                                         (GHC.Prim.-# y2 30#)) of wild10 {
                                                 GHC.Types.False -> GHC.Types.False
                                                 GHC.Types.True
                                                 -> GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.<# x1 (GHC.Prim.+# y2 30#)) }
                                            GHC.Types.True -> GHC.Types.True } } } } } }
                                  GHC.Types.True -> GHC.Types.True }
                             GHC.Types.True -> GHC.Types.True }
                        : ipv ipv1
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# ww 0#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.># (GHC.Prim.+# ww 30#) 300#) of wild3 {
                                  GHC.Types.False
                                  -> case u1 of wild4 { Tetris.Coord ds1 ds2 ds3 ->
                                     case ds1 of wild5 { GHC.Types.I# y1 ->
                                     let {
                                       $j :: GHC.Prim.Void# -> GHC.Types.Bool
                                         {- Arity: 1, Strictness: <L,A> -}
                                       = \ (w4 :: GHC.Prim.Void#)[OneShot] ->
                                         case GHC.Prim.tagToEnum#
                                                @ GHC.Types.Bool
                                                (GHC.Prim.==# ww y1) of wild6 {
                                           GHC.Types.False
                                           -> Tetris.$wcollidesBlockSides ww ww1 wild1
                                           GHC.Types.True
                                           -> case ds2 of wild7 { GHC.Types.I# x1 ->
                                              case ww1 of wild8 { GHC.Types.I# x2 ->
                                              case GHC.Prim.tagToEnum#
                                                     @ GHC.Types.Bool
                                                     (GHC.Prim.>#
                                                        x2
                                                        (GHC.Prim.-# x1 30#)) of wild9 {
                                                GHC.Types.False
                                                -> Tetris.$wcollidesBlockSides ww wild8 wild1
                                                GHC.Types.True
                                                -> case GHC.Prim.tagToEnum#
                                                          @ GHC.Types.Bool
                                                          (GHC.Prim.<#
                                                             x2
                                                             (GHC.Prim.+# x1 30#)) of wild10 {
                                                     GHC.Types.False
                                                     -> Tetris.$wcollidesBlockSides ww wild8 wild1
                                                     GHC.Types.True -> GHC.Types.True } } } } }
                                     } in
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.==# ww y1) of wild6 {
                                       GHC.Types.False -> $j GHC.Prim.void#
                                       GHC.Types.True
                                       -> case ww1 of wild7 { GHC.Types.I# x1 ->
                                          case ds2 of wild8 { GHC.Types.I# y2 ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# x1 y2) of wild9 {
                                            GHC.Types.False -> $j GHC.Prim.void#
                                            GHC.Types.True -> GHC.Types.True } } } } } }
                                  GHC.Types.True -> GHC.Types.True }
                             GHC.Types.True -> GHC.Types.True } } }) -}
2b2b0a5a331dd09b1a941c1a66cfa150
  $wcollidesBlockUp ::
    GHC.Prim.Int# -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,1*U>, Inline: [0] -}
bbb270edaa53446473e3c05cbb9eb86f
  $wcollidesFigure ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> Tetris.Coord
    -> Tetris.Coord
    -> Tetris.Coord
    -> Tetris.Board
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,U(U)><L,U(U(U),U(U),A)><L,U(U(U),U(U),A)><L,U(U(U),U(U),A)><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Tetris.Coord)
                   (ww3 :: Tetris.Coord)
                   (ww4 :: Tetris.Coord)
                   (w :: Tetris.Board) ->
                 case Tetris.$wcollidesFigureSides ww ww1 ww2 ww3 ww4 w of wild {
                   GHC.Types.False
                   -> case ww1 of ww5 { GHC.Types.I# ww6 ->
                      Tetris.$wcollidesFigureDown (GHC.Types.I# ww) ww6 ww2 ww3 ww4 w }
                   GHC.Types.True -> GHC.Types.True }) -}
20af6b54fa18d2885f57ba2ee6f8ce22
  $wcollidesFigureDown ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> Tetris.Coord
    -> Tetris.Coord
    -> Tetris.Coord
    -> Tetris.Board
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U(U)><S,U><L,1*U(U(U),U(U),A)><L,1*U(U(U),U(U),A)><L,1*U(U(U),U(U),A)><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: Tetris.Coord)
                   (ww3 :: Tetris.Coord)
                   (ww4 :: Tetris.Coord)
                   (w :: Tetris.Board) ->
                 case Tetris.$wcollidesBlockDown ww ww1 w of wild {
                   GHC.Types.False
                   -> case ww2 of ww5 { Tetris.Coord ww6 ww7 ww8 ->
                      case ww7 of ww9 { GHC.Types.I# ww10 ->
                      case Tetris.$wcollidesBlockDown ww6 ww10 w of wild1 {
                        GHC.Types.False
                        -> case ww3 of ww11 { Tetris.Coord ww12 ww13 ww14 ->
                           case ww13 of ww15 { GHC.Types.I# ww16 ->
                           case Tetris.$wcollidesBlockDown ww12 ww16 w of wild2 {
                             GHC.Types.False -> Tetris.collidesBlockDown ww4 w
                             GHC.Types.True -> GHC.Types.True } } }
                        GHC.Types.True -> GHC.Types.True } } }
                   GHC.Types.True -> GHC.Types.True }) -}
21ac98913fa59d604d4a8da2b0faa5fe
  $wcollidesFigureDownSmooth ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> Tetris.Coord
    -> Tetris.Coord
    -> Tetris.Coord
    -> Tetris.Board
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U(U)><S,U><L,1*U(U(U),U(U),A)><L,1*U(U(U),U(U),A)><L,1*U(U(U),U(U),A)><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: Tetris.Coord)
                   (ww3 :: Tetris.Coord)
                   (ww4 :: Tetris.Coord)
                   (w :: Tetris.Board) ->
                 case Tetris.$wcollidesBlockDownSmooth ww ww1 w of wild {
                   GHC.Types.False
                   -> case ww2 of ww5 { Tetris.Coord ww6 ww7 ww8 ->
                      case ww7 of ww9 { GHC.Types.I# ww10 ->
                      case Tetris.$wcollidesBlockDownSmooth ww6 ww10 w of wild1 {
                        GHC.Types.False
                        -> case ww3 of ww11 { Tetris.Coord ww12 ww13 ww14 ->
                           case ww13 of ww15 { GHC.Types.I# ww16 ->
                           case Tetris.$wcollidesBlockDownSmooth ww12 ww16 w of wild2 {
                             GHC.Types.False -> Tetris.collidesBlockDownSmooth ww4 w
                             GHC.Types.True -> GHC.Types.True } } }
                        GHC.Types.True -> GHC.Types.True } } }
                   GHC.Types.True -> GHC.Types.True }) -}
0ecac94ceee7567e724377ff5ff43248
  $wcollidesFigureSides ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> Tetris.Coord
    -> Tetris.Coord
    -> Tetris.Coord
    -> Tetris.Board
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,U(U)><L,1*U(U(U),U(U),A)><L,1*U(U(U),U(U),A)><L,1*U(U(U),U(U),A)><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Tetris.Coord)
                   (ww3 :: Tetris.Coord)
                   (ww4 :: Tetris.Coord)
                   (w :: Tetris.Board) ->
                 case Tetris.$wcollidesBlockSides ww ww1 w of wild {
                   GHC.Types.False
                   -> case ww2 of ww5 { Tetris.Coord ww6 ww7 ww8 ->
                      case ww6 of ww9 { GHC.Types.I# ww10 ->
                      case Tetris.$wcollidesBlockSides ww10 ww7 w of wild1 {
                        GHC.Types.False
                        -> case ww3 of ww11 { Tetris.Coord ww12 ww13 ww14 ->
                           case ww12 of ww15 { GHC.Types.I# ww16 ->
                           case Tetris.$wcollidesBlockSides ww16 ww13 w of wild2 {
                             GHC.Types.False -> Tetris.collidesBlockSides ww4 w
                             GHC.Types.True -> GHC.Types.True } } }
                        GHC.Types.True -> GHC.Types.True } } }
                   GHC.Types.True -> GHC.Types.True }) -}
1cf83caccec6bf9747436475c8c56fe4
  $wcollidesFigureSidesSmooth ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> Tetris.Coord
    -> Tetris.Coord
    -> Tetris.Coord
    -> Tetris.Board
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,U(U)><L,1*U(U(U),U(U),A)><L,1*U(U(U),U(U),A)><L,1*U(U(U),U(U),A)><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Tetris.Coord)
                   (ww3 :: Tetris.Coord)
                   (ww4 :: Tetris.Coord)
                   (w :: Tetris.Board) ->
                 case Tetris.$wcollidesBlockSidesSmooth ww ww1 w of wild {
                   GHC.Types.False
                   -> case ww2 of ww5 { Tetris.Coord ww6 ww7 ww8 ->
                      case ww6 of ww9 { GHC.Types.I# ww10 ->
                      case Tetris.$wcollidesBlockSidesSmooth ww10 ww7 w of wild1 {
                        GHC.Types.False
                        -> case ww3 of ww11 { Tetris.Coord ww12 ww13 ww14 ->
                           case ww12 of ww15 { GHC.Types.I# ww16 ->
                           case Tetris.$wcollidesBlockSidesSmooth ww16 ww13 w of wild2 {
                             GHC.Types.False -> Tetris.collidesBlockSidesSmooth ww4 w
                             GHC.Types.True -> GHC.Types.True } } }
                        GHC.Types.True -> GHC.Types.True } } }
                   GHC.Types.True -> GHC.Types.True }) -}
65503694e41f8bc29d8630e12d8dd8a5
  $wcollidesFigureSidesWallLeft ::
    GHC.Prim.Int#
    -> Tetris.Coord -> Tetris.Coord -> Tetris.Coord -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(1*U(U),A,A)><L,1*U(1*U(U),A,A)><L,1*U(1*U(U),A,A)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Tetris.Coord)
                   (ww2 :: Tetris.Coord)
                   (ww3 :: Tetris.Coord) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww 0#) of wild {
                   GHC.Types.False
                   -> case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                      case ds of wild2 { GHC.Types.I# x1 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# x1 0#) of wild3 {
                        GHC.Types.False
                        -> case ww2 of wild4 { Tetris.Coord ds3 ds4 ds5 ->
                           case ds3 of wild5 { GHC.Types.I# x2 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x2 0#) of wild6 {
                             GHC.Types.False
                             -> case ww3 of wild7 { Tetris.Coord ds6 ds7 ds8 ->
                                case ds6 of wild8 { GHC.Types.I# x3 ->
                                GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# x3 0#) } }
                             GHC.Types.True -> GHC.Types.True } } }
                        GHC.Types.True -> GHC.Types.True } } }
                   GHC.Types.True -> GHC.Types.True }) -}
1914627673583c48016be746b317c4b8
  $wcollidesFigureSidesWallRight ::
    GHC.Prim.Int#
    -> Tetris.Coord -> Tetris.Coord -> Tetris.Coord -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(1*U(U),A,A)><L,1*U(1*U(U),A,A)><L,1*U(1*U(U),A,A)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Tetris.Coord)
                   (ww2 :: Tetris.Coord)
                   (ww3 :: Tetris.Coord) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># (GHC.Prim.+# ww 30#) 300#) of wild {
                   GHC.Types.False
                   -> case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                      case ds of wild2 { GHC.Types.I# x1 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.># (GHC.Prim.+# x1 30#) 300#) of wild3 {
                        GHC.Types.False
                        -> case ww2 of wild4 { Tetris.Coord ds3 ds4 ds5 ->
                           case ds3 of wild5 { GHC.Types.I# x2 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># (GHC.Prim.+# x2 30#) 300#) of wild6 {
                             GHC.Types.False
                             -> case ww3 of wild7 { Tetris.Coord ds6 ds7 ds8 ->
                                case ds6 of wild8 { GHC.Types.I# x3 ->
                                GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># (GHC.Prim.+# x3 30#) 300#) } }
                             GHC.Types.True -> GHC.Types.True } } }
                        GHC.Types.True -> GHC.Types.True } } }
                   GHC.Types.True -> GHC.Types.True }) -}
6519990e3e4a1095e7eb631386ec1cfc
  $wcollidesFigureSmooth ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> Tetris.Coord
    -> Tetris.Coord
    -> Tetris.Coord
    -> Tetris.Board
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,U(U)><L,U(U(U),U(U),A)><L,U(U(U),U(U),A)><L,U(U(U),U(U),A)><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Tetris.Coord)
                   (ww3 :: Tetris.Coord)
                   (ww4 :: Tetris.Coord)
                   (w :: Tetris.Board) ->
                 case Tetris.$wcollidesFigureSidesSmooth
                        ww
                        ww1
                        ww2
                        ww3
                        ww4
                        w of wild {
                   GHC.Types.False
                   -> case ww1 of ww5 { GHC.Types.I# ww6 ->
                      Tetris.$wcollidesFigureDownSmooth
                        (GHC.Types.I# ww)
                        ww6
                        ww2
                        ww3
                        ww4
                        w }
                   GHC.Types.True -> GHC.Types.True }) -}
17e9d707f376114826fba9cd573244c7
  $wdrawBlock ::
    Tetris.Coord
    -> (# [Graphics.Gloss.Internals.Data.Picture.Picture] #)
  {- Arity: 1, Strictness: <L,U(1*U(U),1*U(U),1*U(1*U))>,
     Inline: [0],
     Unfolding: (\ (w :: Tetris.Coord) ->
                 (# GHC.Types.:
                      @ Graphics.Gloss.Internals.Data.Picture.Picture
                      (Graphics.Gloss.Internals.Data.Picture.Translate
                         Tetris.drawBlock1
                         Tetris.screenWidthFloat
                         (Graphics.Gloss.Internals.Data.Picture.Scale
                            Tetris.scaleBackGrTwo
                            Tetris.scaleBackGrTwo
                            (Graphics.Gloss.Internals.Data.Picture.Pictures
                               (let {
                                  c :: GHC.Types.Int
                                  = case w of wild { Tetris.Coord ds ds1 ds2 -> ds1 }
                                } in
                                let {
                                  b :: GHC.Types.Int
                                  = case w of wild { Tetris.Coord ds ds1 ds2 -> ds }
                                } in
                                GHC.Types.:
                                  @ Graphics.Gloss.Internals.Data.Picture.Picture
                                  (Graphics.Gloss.Internals.Data.Picture.Color
                                     (case w of wild { Tetris.Coord ds ds1 ds2 ->
                                      case ds2 of wild1 { GHC.Types.I# ds3 ->
                                      case ds3 of ds4 {
                                        DEFAULT -> Graphics.Gloss.Data.Color.white
                                        0# -> Graphics.Gloss.Data.Color.azure
                                        1# -> Graphics.Gloss.Data.Color.blue
                                        2# -> Graphics.Gloss.Data.Color.yellow
                                        3# -> Graphics.Gloss.Data.Color.red
                                        4# -> Graphics.Gloss.Data.Color.green
                                        5# -> Graphics.Gloss.Data.Color.orange } } })
                                     (Graphics.Gloss.Internals.Data.Picture.Polygon
                                        (GHC.Types.:
                                           @ Graphics.Gloss.Internals.Data.Picture.Point
                                           (GHC.Float.RealFracMethods.int2Float b,
                                            case c of wild { GHC.Types.I# x1 ->
                                            GHC.Types.F#
                                              (GHC.Prim.int2Float# (GHC.Prim.negateInt# x1)) })
                                           (GHC.Types.:
                                              @ Graphics.Gloss.Internals.Data.Picture.Point
                                              (GHC.Float.RealFracMethods.int2Float b,
                                               case c of wild { GHC.Types.I# x1 ->
                                               GHC.Types.F#
                                                 (GHC.Prim.int2Float#
                                                    (GHC.Prim.-# (GHC.Prim.negateInt# x1) 30#)) })
                                              (GHC.Types.:
                                                 @ Graphics.Gloss.Internals.Data.Picture.Point
                                                 (case b of wild { GHC.Types.I# x1 ->
                                                  GHC.Types.F#
                                                    (GHC.Prim.int2Float# (GHC.Prim.+# x1 30#)) },
                                                  case c of wild { GHC.Types.I# x1 ->
                                                  GHC.Types.F#
                                                    (GHC.Prim.int2Float#
                                                       (GHC.Prim.-#
                                                          (GHC.Prim.negateInt# x1)
                                                          30#)) })
                                                 (GHC.Types.:
                                                    @ Graphics.Gloss.Internals.Data.Picture.Point
                                                    (case b of wild { GHC.Types.I# x1 ->
                                                     GHC.Types.F#
                                                       (GHC.Prim.int2Float# (GHC.Prim.+# x1 30#)) },
                                                     case c of wild { GHC.Types.I# x1 ->
                                                     GHC.Types.F#
                                                       (GHC.Prim.int2Float#
                                                          (GHC.Prim.negateInt# x1)) })
                                                    (GHC.Types.[]
                                                       @ Graphics.Gloss.Internals.Data.Picture.Point)))))))
                                  (Tetris.magframe b c)))))
                      (GHC.Types.[]
                         @ Graphics.Gloss.Internals.Data.Picture.Picture) #)) -}
23661c7fe80c1fac8624fc8f9f8e01af
  $wdrawBlockCircle ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 3, Strictness: <S,1*U><L,U(U)><L,1*U(1*U)>,
     Inline: [0] -}
c8e7185e57946aa774da614caf00c218
  $wdrawBlockedFigureCircle ::
    Tetris.Coord
    -> Tetris.Coord
    -> Tetris.Coord
    -> Tetris.Coord
    -> (# [Graphics.Gloss.Internals.Data.Picture.Picture] #)
  {- Arity: 4,
     Strictness: <L,1*U(1*U(1*U),U(U),1*U(1*U))><L,1*U(1*U(1*U),U(U),1*U(1*U))><L,1*U(1*U(1*U),U(U),1*U(1*U))><L,1*U(1*U(1*U),U(U),1*U(1*U))>,
     Inline: [0],
     Unfolding: (\ (ww :: Tetris.Coord)
                   (ww1 :: Tetris.Coord)
                   (ww2 :: Tetris.Coord)
                   (ww3 :: Tetris.Coord) ->
                 (# GHC.Types.:
                      @ Graphics.Gloss.Internals.Data.Picture.Picture
                      (case ww of wild { Tetris.Coord ds ds1 ds2 ->
                       case ds of ww4 { GHC.Types.I# ww5 ->
                       Tetris.$wdrawBlockCircle ww5 ds1 ds2 } })
                      (GHC.Types.:
                         @ Graphics.Gloss.Internals.Data.Picture.Picture
                         (case ww1 of wild { Tetris.Coord ds ds1 ds2 ->
                          case ds of ww4 { GHC.Types.I# ww5 ->
                          Tetris.$wdrawBlockCircle ww5 ds1 ds2 } })
                         (GHC.Types.:
                            @ Graphics.Gloss.Internals.Data.Picture.Picture
                            (case ww2 of wild { Tetris.Coord ds ds1 ds2 ->
                             case ds of ww4 { GHC.Types.I# ww5 ->
                             Tetris.$wdrawBlockCircle ww5 ds1 ds2 } })
                            (GHC.Types.:
                               @ Graphics.Gloss.Internals.Data.Picture.Picture
                               (case ww3 of wild { Tetris.Coord ds ds1 ds2 ->
                                case ds of ww4 { GHC.Types.I# ww5 ->
                                Tetris.$wdrawBlockCircle ww5 ds1 ds2 } })
                               (GHC.Types.[]
                                  @ Graphics.Gloss.Internals.Data.Picture.Picture)))) #)) -}
24b94cfa62ff5cd49437c2cc628dfd78
  $wdrawTetris ::
    Tetris.Board
    -> [Tetris.Figure]
    -> Tetris.Score
    -> Tetris.TetrisType
    -> (# [Graphics.Gloss.Internals.Data.Picture.Picture] #)
  {- Arity: 4, Strictness: <L,1*U><L,1*U><L,1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Tetris.Board)
                   (ww1 :: [Tetris.Figure])
                   (ww2 :: Tetris.Score)
                   (ww3 :: Tetris.TetrisType) ->
                 case ww3 of wild {
                   Tetris.TetrisRect
                   -> (# GHC.Types.:
                           @ Graphics.Gloss.Internals.Data.Picture.Picture
                           (case ww1 of wild1 {
                              [] -> Tetris.drawTetris44
                              : f ds
                              -> case f of ww4 { Tetris.Figure ww5 ww6 ww7 ->
                                 Tetris.drawTetris43 ww5 ww6 ww7 } })
                           (GHC.Types.:
                              @ Graphics.Gloss.Internals.Data.Picture.Picture
                              (Tetris.drawBoard ww)
                              (GHC.Types.:
                                 @ Graphics.Gloss.Internals.Data.Picture.Picture
                                 (Tetris.drawScore ww2)
                                 Tetris.drawTetris37)) #)
                   Tetris.TetrisRound
                   -> (# GHC.Types.:
                           @ Graphics.Gloss.Internals.Data.Picture.Picture
                           (case ww1 of wild1 {
                              [] -> Tetris.drawTetris33
                              : f ds
                              -> case f of ww4 { Tetris.Figure ww5 ww6 ww7 ->
                                 Tetris.drawTetris32 ww5 ww6 ww7 } })
                           (GHC.Types.:
                              @ Graphics.Gloss.Internals.Data.Picture.Picture
                              (Tetris.drawBoardCircle ww)
                              (GHC.Types.:
                                 @ Graphics.Gloss.Internals.Data.Picture.Picture
                                 (Tetris.drawScore ww2)
                                 Tetris.drawTetris1)) #) }) -}
b4b5ebddcf0ff062a87beaa3da840ace
  $wdropitSmooth ::
    Tetris.Board
    -> [Tetris.Figure]
    -> (Tetris.Speed, Tetris.Time)
    -> Tetris.Score
    -> Tetris.TetrisType
    -> Tetris.TetrisMove
    -> Tetris.Time
    -> GHC.Types.Int
    -> (# Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
          Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove, Tetris.Time #)
  {- Arity: 8,
     Strictness: <S,U><S,U><L,U><L,1*U(U)><L,U><L,U><L,U><L,1*U(U)>,
     Inline: [0] -}
4316deb5ba2a8c7aea01de8241b23e18
  $wdropitStepped ::
    Tetris.Board
    -> [Tetris.Figure]
    -> (Tetris.Speed, Tetris.Time)
    -> Tetris.Score
    -> Tetris.TetrisType
    -> Tetris.TetrisMove
    -> Tetris.Time
    -> GHC.Types.Int
    -> (# Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
          Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove, Tetris.Time #)
  {- Arity: 8,
     Strictness: <S,U><S,U><L,U><L,1*U(U)><L,U><L,U><L,U><L,1*U(U)>,
     Inline: [0] -}
1164eb4aaf1348ace91b4b24af5e81b1
  $wfigureToDraw ::
    Tetris.FigureType
    -> Tetris.Direction
    -> Tetris.Coord
    -> (# Tetris.Coord, Tetris.Coord, Tetris.Coord, Tetris.Coord #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,U(U(U),U(U),U)>, Inline: [0],
     Unfolding: (\ (ww :: Tetris.FigureType)
                   (ww1 :: Tetris.Direction)
                   (ww2 :: Tetris.Coord) ->
                 case ww of wild {
                   Tetris.O
                   -> (# ww2,
                         case ww2 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           ds1
                           ds2 },
                         case ww2 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           ds
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds2 },
                         case ww2 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds2 } #)
                   Tetris.I -> Tetris.$wfigureToDrawI ww1 ww2
                   Tetris.T -> Tetris.$wfigureToDrawT ww1 ww2
                   Tetris.J -> Tetris.$wfigureToDrawJ ww1 ww2
                   Tetris.L -> Tetris.$wfigureToDrawL ww1 ww2
                   Tetris.S -> Tetris.$wfigureToDrawS ww1 ww2
                   Tetris.Z -> Tetris.$wfigureToDrawZ ww1 ww2 }) -}
3e3d72858b880a28980e9b28c0d61d8d
  $wfigureToDrawI ::
    Tetris.Direction
    -> Tetris.Coord
    -> (# Tetris.Coord, Tetris.Coord, Tetris.Coord, Tetris.Coord #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U(U),U(U),U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Tetris.Direction) (ww1 :: Tetris.Coord) ->
                 case ww of wild {
                   DEFAULT
                   -> (# case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           ds
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           ds2 },
                         ww1,
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           ds
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds2 },
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           ds
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 60#) })
                           ds2 } #)
                   Tetris.DLeft
                   -> (# case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds1
                           ds2 },
                         ww1,
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           ds1
                           ds2 },
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 60#) })
                           ds1
                           ds2 } #)
                   Tetris.DRight
                   -> (# case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds1
                           ds2 },
                         ww1,
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           ds1
                           ds2 },
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 60#) })
                           ds1
                           ds2 } #) }) -}
7c27d6b9d23b2aa9e790e7488e0e5c73
  $wfigureToDrawJ ::
    Tetris.Direction
    -> Tetris.Coord
    -> (# Tetris.Coord, Tetris.Coord, Tetris.Coord, Tetris.Coord #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U(U),U(U),U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Tetris.Direction) (ww1 :: Tetris.Coord) ->
                 case ww of wild {
                   DEFAULT
                   -> let {
                        $w$j :: GHC.Prim.Void#
                                -> (# Tetris.Coord, Tetris.Coord, Tetris.Coord, Tetris.Coord #)
                          {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                        = \ (void :: GHC.Prim.Void#)[OneShot] ->
                          case wild of wild1 {
                            DEFAULT
                            -> (# case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                                  Tetris.Coord
                                    (case ds of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                    (case ds1 of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                    ds2 },
                                  case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                                  Tetris.Coord
                                    (case ds of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                    ds1
                                    ds2 },
                                  ww1,
                                  case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                                  Tetris.Coord
                                    (case ds of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                    ds1
                                    ds2 } #)
                            Tetris.DRight
                            -> (# case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                                  Tetris.Coord
                                    (case ds of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                    ds1
                                    ds2 },
                                  ww1,
                                  case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                                  Tetris.Coord
                                    (case ds of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                    ds1
                                    ds2 },
                                  case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                                  Tetris.Coord
                                    (case ds of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                    (case ds1 of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                    ds2 } #) }
                      } in
                      case wild of wild1 {
                        Tetris.DUp
                        -> (# case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                              Tetris.Coord
                                ds
                                (case ds1 of wild3 { GHC.Types.I# x1 ->
                                 GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                ds2 },
                              ww1,
                              case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                              Tetris.Coord
                                ds
                                (case ds1 of wild3 { GHC.Types.I# x1 ->
                                 GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                ds2 },
                              case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                              Tetris.Coord
                                (case ds of wild3 { GHC.Types.I# x1 ->
                                 GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                (case ds1 of wild3 { GHC.Types.I# x1 ->
                                 GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                ds2 } #)
                        Tetris.DLeft -> $w$j GHC.Prim.void#
                        Tetris.DRight -> $w$j GHC.Prim.void# }
                   Tetris.DDown
                   -> (# case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds2 },
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           ds
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds2 },
                         ww1,
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           ds
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           ds2 } #) }) -}
f3d5eff4be84a1a3f6755f68a14f29b3
  $wfigureToDrawL ::
    Tetris.Direction
    -> Tetris.Coord
    -> (# Tetris.Coord, Tetris.Coord, Tetris.Coord, Tetris.Coord #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U(U),U(U),U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Tetris.Direction) (ww1 :: Tetris.Coord) ->
                 case ww of wild {
                   DEFAULT
                   -> let {
                        $w$j :: GHC.Prim.Void#
                                -> (# Tetris.Coord, Tetris.Coord, Tetris.Coord, Tetris.Coord #)
                          {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                        = \ (void :: GHC.Prim.Void#)[OneShot] ->
                          case wild of wild1 {
                            DEFAULT
                            -> (# case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                                  Tetris.Coord
                                    (case ds of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                    (case ds1 of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                    ds2 },
                                  case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                                  Tetris.Coord
                                    (case ds of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                    ds1
                                    ds2 },
                                  ww1,
                                  case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                                  Tetris.Coord
                                    (case ds of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                    ds1
                                    ds2 } #)
                            Tetris.DRight
                            -> (# case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                                  Tetris.Coord
                                    (case ds of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                    ds1
                                    ds2 },
                                  ww1,
                                  case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                                  Tetris.Coord
                                    (case ds of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                    ds1
                                    ds2 },
                                  case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                                  Tetris.Coord
                                    (case ds of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                    (case ds1 of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                    ds2 } #) }
                      } in
                      case wild of wild1 {
                        Tetris.DUp
                        -> (# case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                              Tetris.Coord
                                ds
                                (case ds1 of wild3 { GHC.Types.I# x1 ->
                                 GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                ds2 },
                              ww1,
                              case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                              Tetris.Coord
                                ds
                                (case ds1 of wild3 { GHC.Types.I# x1 ->
                                 GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                ds2 },
                              case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                              Tetris.Coord
                                (case ds of wild3 { GHC.Types.I# x1 ->
                                 GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                (case ds1 of wild3 { GHC.Types.I# x1 ->
                                 GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                ds2 } #)
                        Tetris.DLeft -> $w$j GHC.Prim.void#
                        Tetris.DRight -> $w$j GHC.Prim.void# }
                   Tetris.DDown
                   -> (# case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           ds
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           ds2 },
                         ww1,
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           ds
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds2 },
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds2 } #) }) -}
eb19b54c65e375f7f1df497200f3ab96
  $wfigureToDrawS ::
    Tetris.Direction
    -> Tetris.Coord
    -> (# Tetris.Coord, Tetris.Coord, Tetris.Coord, Tetris.Coord #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U(U),U(U),U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Tetris.Direction) (ww1 :: Tetris.Coord) ->
                 case ww of wild {
                   DEFAULT
                   -> (# case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           ds2 },
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds1
                           ds2 },
                         ww1,
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           ds
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds2 } #)
                   Tetris.DLeft
                   -> (# case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds1
                           ds2 },
                         ww1,
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           ds
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           ds2 },
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           ds2 } #)
                   Tetris.DRight
                   -> (# case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds1
                           ds2 },
                         ww1,
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           ds
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           ds2 },
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           ds2 } #) }) -}
98c959fcd4791fe529a750ca6c377991
  $wfigureToDrawT ::
    Tetris.Direction
    -> Tetris.Coord
    -> (# Tetris.Coord, Tetris.Coord, Tetris.Coord, Tetris.Coord #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U(U),U(U),U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Tetris.Direction) (ww1 :: Tetris.Coord) ->
                 case ww of wild {
                   DEFAULT
                   -> let {
                        $w$j :: GHC.Prim.Void#
                                -> (# Tetris.Coord, Tetris.Coord, Tetris.Coord, Tetris.Coord #)
                          {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                        = \ (void :: GHC.Prim.Void#)[OneShot] ->
                          case wild of wild1 {
                            DEFAULT
                            -> (# case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                                  Tetris.Coord
                                    ds
                                    (case ds1 of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                    ds2 },
                                  ww1,
                                  case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                                  Tetris.Coord
                                    ds
                                    (case ds1 of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                    ds2 },
                                  case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                                  Tetris.Coord
                                    (case ds of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                    ds1
                                    ds2 } #)
                            Tetris.DRight
                            -> (# case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                                  Tetris.Coord
                                    ds
                                    (case ds1 of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                    ds2 },
                                  ww1,
                                  case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                                  Tetris.Coord
                                    ds
                                    (case ds1 of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                    ds2 },
                                  case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                                  Tetris.Coord
                                    (case ds of wild3 { GHC.Types.I# x1 ->
                                     GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                    ds1
                                    ds2 } #) }
                      } in
                      case wild of wild1 {
                        Tetris.DUp
                        -> (# case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                              Tetris.Coord
                                (case ds of wild3 { GHC.Types.I# x1 ->
                                 GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                ds1
                                ds2 },
                              ww1,
                              case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                              Tetris.Coord
                                (case ds of wild3 { GHC.Types.I# x1 ->
                                 GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                ds1
                                ds2 },
                              case ww1 of wild2 { Tetris.Coord ds ds1 ds2 ->
                              Tetris.Coord
                                ds
                                (case ds1 of wild3 { GHC.Types.I# x1 ->
                                 GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                ds2 } #)
                        Tetris.DLeft -> $w$j GHC.Prim.void#
                        Tetris.DRight -> $w$j GHC.Prim.void# }
                   Tetris.DDown
                   -> (# case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds1
                           ds2 },
                         ww1,
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           ds1
                           ds2 },
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           ds
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds2 } #) }) -}
8939f466d10a86958647711a36d69092
  $wfigureToDrawZ ::
    Tetris.Direction
    -> Tetris.Coord
    -> (# Tetris.Coord, Tetris.Coord, Tetris.Coord, Tetris.Coord #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U(U),U(U),U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Tetris.Direction) (ww1 :: Tetris.Coord) ->
                 case ww of wild {
                   DEFAULT
                   -> (# case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds2 },
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds1
                           ds2 },
                         ww1,
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           ds
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           ds2 } #)
                   Tetris.DLeft
                   -> (# case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds1
                           ds2 },
                         ww1,
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           ds
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds2 },
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds2 } #)
                   Tetris.DRight
                   -> (# case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds1
                           ds2 },
                         ww1,
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           ds
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds2 },
                         case ww1 of wild1 { Tetris.Coord ds ds1 ds2 ->
                         Tetris.Coord
                           (case ds of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 30#) })
                           (case ds1 of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 30#) })
                           ds2 } #) }) -}
926b1d6709c1e76d5596e81f4094bc5b
  $wgenRow :: GHC.Prim.Int# -> Tetris.Row
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
72c93d7ec14d3ffb189bd8afd85d561e
  $wgenRows :: GHC.Types.Int -> GHC.Prim.Int# -> [Tetris.Row]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U>,
     Inline: [0] -}
6fb58ca673e306e2c7c2dee373ca8c0d
  $wisGameOver ::
    Tetris.Board
    -> [Tetris.Figure] -> Tetris.TetrisMove -> GHC.Types.Bool
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Tetris.Board)
                   (ww1 :: [Tetris.Figure])
                   (ww2 :: Tetris.TetrisMove) ->
                 case ww2 of wild {
                   Tetris.TetrisStepped
                   -> let {
                        $j :: Tetris.FigureType
                              -> Tetris.Direction -> Tetris.Coord -> GHC.Types.Bool
                          {- Arity: 3 -}
                        = \ (ww3 :: Tetris.FigureType)[OneShot]
                            (ww4 :: Tetris.Direction)[OneShot]
                            (ww5 :: Tetris.Coord)[OneShot] ->
                          case Tetris.$wfigureToDraw
                                 ww3
                                 ww4
                                 ww5 of ww6 { (#,,,#) ww7 ww8 ww9 ww10 ->
                          case ww7 of ww11 { Tetris.Coord ww12 ww13 ww14 ->
                          case ww13 of ww15 { GHC.Types.I# ww16 ->
                          Tetris.$wcollidesFigureDown ww12 ww16 ww8 ww9 ww10 ww } } }
                      } in
                      case ww1 of wild1 {
                        [] -> $j Tetris.T Tetris.DUp Tetris.drawFigure2
                        : ds fs
                        -> case fs of wild2 {
                             [] -> $j Tetris.T Tetris.DUp Tetris.drawFigure2
                             : f ds1
                             -> case f of ww3 { Tetris.Figure ww4 ww5 ww6 ->
                                $j ww4 ww5 ww6 } } }
                   Tetris.TetrisSmooth
                   -> let {
                        $j :: Tetris.FigureType
                              -> Tetris.Direction -> Tetris.Coord -> GHC.Types.Bool
                          {- Arity: 3 -}
                        = \ (ww3 :: Tetris.FigureType)[OneShot]
                            (ww4 :: Tetris.Direction)[OneShot]
                            (ww5 :: Tetris.Coord)[OneShot] ->
                          case Tetris.$wfigureToDraw
                                 ww3
                                 ww4
                                 ww5 of ww6 { (#,,,#) ww7 ww8 ww9 ww10 ->
                          case ww7 of ww11 { Tetris.Coord ww12 ww13 ww14 ->
                          case ww13 of ww15 { GHC.Types.I# ww16 ->
                          Tetris.$wcollidesFigureDownSmooth ww12 ww16 ww8 ww9 ww10 ww } } }
                      } in
                      case ww1 of wild1 {
                        [] -> $j Tetris.T Tetris.DUp Tetris.drawFigure2
                        : f ds
                        -> case f of ww3 { Tetris.Figure ww4 ww5 ww6 ->
                           $j ww4 ww5 ww6 } } }) -}
62fce355331782b725c514ba3a472609
  $wmagframe ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> (# Graphics.Gloss.Internals.Data.Picture.Picture,
          [Graphics.Gloss.Internals.Data.Picture.Picture] #)
  {- Arity: 2, Strictness: <L,U(U)><L,U(U)>, Inline: [0] -}
50d7178f75e36b71746f55e799e3ad4f
  $wmoveLeft ::
    Tetris.Board
    -> [Tetris.Figure]
    -> (Tetris.Speed, Tetris.Time)
    -> Tetris.Score
    -> Tetris.TetrisType
    -> Tetris.TetrisMove
    -> Tetris.Time
    -> (# Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
          Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove, Tetris.Time #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><L,U><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Tetris.Board)
                   (ww1 :: [Tetris.Figure])
                   (ww2 :: (Tetris.Speed, Tetris.Time))
                   (ww3 :: Tetris.Score)
                   (ww4 :: Tetris.TetrisType)
                   (ww5 :: Tetris.TetrisMove)
                   (ww6 :: Tetris.Time) ->
                 let {
                   $w$j :: GHC.Prim.Void#
                           -> (# Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
                                 Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove, Tetris.Time #)
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ (void :: GHC.Prim.Void#)[OneShot] ->
                     let {
                       $w$j1 :: GHC.Prim.Void#
                                -> (# Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
                                      Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove,
                                      Tetris.Time #)
                         {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                       = \ (void1 :: GHC.Prim.Void#)[OneShot] ->
                         case ww5 of wild {
                           Tetris.TetrisStepped
                           -> (# ww,
                                 GHC.Types.:
                                   @ Tetris.Figure
                                   (case ww1 of wild1 {
                                      [] -> Tetris.handleTetris4
                                      : f ds
                                      -> case f of wild2 { Tetris.Figure s t u ->
                                         Tetris.Figure
                                           s
                                           t
                                           (case u of wild3 { Tetris.Coord ds1 ds2 ds3 ->
                                            Tetris.Coord
                                              (case ds1 of wild4 { GHC.Types.I# x1 ->
                                               GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                              ds2
                                              ds3 }) } })
                                   (case ww1 of wild1 {
                                      [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs }),
                                 ww2, ww3, ww4, Tetris.TetrisStepped, ww6 #)
                           Tetris.TetrisSmooth
                           -> case ww4 of wild1 {
                                Tetris.TetrisRect
                                -> Tetris.$wmoveLeftSmoothRect
                                     ww
                                     ww1
                                     ww2
                                     ww3
                                     Tetris.TetrisRect
                                     Tetris.TetrisSmooth
                                     ww6
                                Tetris.TetrisRound
                                -> (# ww,
                                      GHC.Types.:
                                        @ Tetris.Figure
                                        (case ww1 of wild2 {
                                           [] -> Tetris.handleTetris4
                                           : f ds
                                           -> case f of wild3 { Tetris.Figure s t u ->
                                              Tetris.Figure
                                                s
                                                t
                                                (case u of wild4 { Tetris.Coord ds1 ds2 ds3 ->
                                                 Tetris.Coord
                                                   (case ds1 of wild5 { GHC.Types.I# x1 ->
                                                    GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                                   ds2
                                                   ds3 }) } })
                                        (case ww1 of wild2 {
                                           [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs }),
                                      ww2, ww3, Tetris.TetrisRound, Tetris.TetrisSmooth, ww6 #) } }
                     } in
                     case ww5 of wild {
                       Tetris.TetrisStepped
                       -> case ww4 of wild1 {
                            Tetris.TetrisRect -> $w$j1 GHC.Prim.void#
                            Tetris.TetrisRound
                            -> (# ww,
                                  GHC.Types.:
                                    @ Tetris.Figure
                                    (case ww1 of wild2 {
                                       [] -> Tetris.handleTetris4
                                       : f ds
                                       -> case f of wild3 { Tetris.Figure s t u ->
                                          Tetris.Figure
                                            s
                                            t
                                            (case u of wild4 { Tetris.Coord ds1 ds2 ds3 ->
                                             Tetris.Coord
                                               (case ds1 of wild5 { GHC.Types.I# x1 ->
                                                GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                               ds2
                                               ds3 }) } })
                                    (case ww1 of wild2 {
                                       [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs }),
                                  ww2, ww3, Tetris.TetrisRound, Tetris.TetrisStepped, ww6 #) }
                       Tetris.TetrisSmooth -> $w$j1 GHC.Prim.void# }
                 } in
                 case ww5 of wild {
                   Tetris.TetrisStepped
                   -> case ww4 of wild1 {
                        Tetris.TetrisRect
                        -> Tetris.$wmoveLeftSteppedRect
                             ww
                             ww1
                             ww2
                             ww3
                             Tetris.TetrisRect
                             Tetris.TetrisStepped
                             ww6
                        Tetris.TetrisRound -> $w$j GHC.Prim.void# }
                   Tetris.TetrisSmooth -> $w$j GHC.Prim.void# }) -}
abb7865c80447a22be6e61ea57a8d3d2
  $wmoveLeftSmoothRect ::
    Tetris.Board
    -> [Tetris.Figure]
    -> (Tetris.Speed, Tetris.Time)
    -> Tetris.Score
    -> Tetris.TetrisType
    -> Tetris.TetrisMove
    -> Tetris.Time
    -> (# Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
          Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove, Tetris.Time #)
  {- Arity: 7, Strictness: <L,U><S,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
c1e1230a6ea3cf299c17cc4f5a6d10b6
  $wmoveLeftSteppedRect ::
    Tetris.Board
    -> [Tetris.Figure]
    -> (Tetris.Speed, Tetris.Time)
    -> Tetris.Score
    -> Tetris.TetrisType
    -> Tetris.TetrisMove
    -> Tetris.Time
    -> (# Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
          Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove, Tetris.Time #)
  {- Arity: 7, Strictness: <L,U><S,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
18a8097170d58bb4b28fa78bc237916c
  $wmoveRight ::
    Tetris.Board
    -> [Tetris.Figure]
    -> (Tetris.Speed, Tetris.Time)
    -> Tetris.Score
    -> Tetris.TetrisType
    -> Tetris.TetrisMove
    -> Tetris.Time
    -> (# Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
          Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove, Tetris.Time #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><L,U><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Tetris.Board)
                   (ww1 :: [Tetris.Figure])
                   (ww2 :: (Tetris.Speed, Tetris.Time))
                   (ww3 :: Tetris.Score)
                   (ww4 :: Tetris.TetrisType)
                   (ww5 :: Tetris.TetrisMove)
                   (ww6 :: Tetris.Time) ->
                 let {
                   $w$j :: GHC.Prim.Void#
                           -> (# Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
                                 Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove, Tetris.Time #)
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ (void :: GHC.Prim.Void#)[OneShot] ->
                     let {
                       $w$j1 :: GHC.Prim.Void#
                                -> (# Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
                                      Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove,
                                      Tetris.Time #)
                         {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                       = \ (void1 :: GHC.Prim.Void#)[OneShot] ->
                         case ww5 of wild {
                           Tetris.TetrisStepped
                           -> (# ww,
                                 GHC.Types.:
                                   @ Tetris.Figure
                                   (case ww1 of wild1 {
                                      [] -> Tetris.handleTetris1
                                      : f ds
                                      -> case f of wild2 { Tetris.Figure s t u ->
                                         Tetris.Figure
                                           s
                                           t
                                           (case u of wild3 { Tetris.Coord ds1 ds2 ds3 ->
                                            Tetris.Coord
                                              (case ds1 of wild4 { GHC.Types.I# x1 ->
                                               GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                              ds2
                                              ds3 }) } })
                                   (case ww1 of wild1 {
                                      [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs }),
                                 ww2, ww3, ww4, Tetris.TetrisStepped, ww6 #)
                           Tetris.TetrisSmooth
                           -> case ww4 of wild1 {
                                Tetris.TetrisRect
                                -> Tetris.$wmoveRightSmoothRect
                                     ww
                                     ww1
                                     ww2
                                     ww3
                                     Tetris.TetrisRect
                                     Tetris.TetrisSmooth
                                     ww6
                                Tetris.TetrisRound
                                -> (# ww,
                                      GHC.Types.:
                                        @ Tetris.Figure
                                        (case ww1 of wild2 {
                                           [] -> Tetris.handleTetris1
                                           : f ds
                                           -> case f of wild3 { Tetris.Figure s t u ->
                                              Tetris.Figure
                                                s
                                                t
                                                (case u of wild4 { Tetris.Coord ds1 ds2 ds3 ->
                                                 Tetris.Coord
                                                   (case ds1 of wild5 { GHC.Types.I# x1 ->
                                                    GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                                   ds2
                                                   ds3 }) } })
                                        (case ww1 of wild2 {
                                           [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs }),
                                      ww2, ww3, Tetris.TetrisRound, Tetris.TetrisSmooth, ww6 #) } }
                     } in
                     case ww5 of wild {
                       Tetris.TetrisStepped
                       -> case ww4 of wild1 {
                            Tetris.TetrisRect -> $w$j1 GHC.Prim.void#
                            Tetris.TetrisRound
                            -> (# ww,
                                  GHC.Types.:
                                    @ Tetris.Figure
                                    (case ww1 of wild2 {
                                       [] -> Tetris.handleTetris1
                                       : f ds
                                       -> case f of wild3 { Tetris.Figure s t u ->
                                          Tetris.Figure
                                            s
                                            t
                                            (case u of wild4 { Tetris.Coord ds1 ds2 ds3 ->
                                             Tetris.Coord
                                               (case ds1 of wild5 { GHC.Types.I# x1 ->
                                                GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                               ds2
                                               ds3 }) } })
                                    (case ww1 of wild2 {
                                       [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs }),
                                  ww2, ww3, Tetris.TetrisRound, Tetris.TetrisStepped, ww6 #) }
                       Tetris.TetrisSmooth -> $w$j1 GHC.Prim.void# }
                 } in
                 case ww5 of wild {
                   Tetris.TetrisStepped
                   -> case ww4 of wild1 {
                        Tetris.TetrisRect
                        -> Tetris.$wmoveRightSteppedRect
                             ww
                             ww1
                             ww2
                             ww3
                             Tetris.TetrisRect
                             Tetris.TetrisStepped
                             ww6
                        Tetris.TetrisRound -> $w$j GHC.Prim.void# }
                   Tetris.TetrisSmooth -> $w$j GHC.Prim.void# }) -}
befa9d23a4b8c8b17b7ea9d837543650
  $wmoveRightSmoothRect ::
    Tetris.Board
    -> [Tetris.Figure]
    -> (Tetris.Speed, Tetris.Time)
    -> Tetris.Score
    -> Tetris.TetrisType
    -> Tetris.TetrisMove
    -> Tetris.Time
    -> (# Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
          Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove, Tetris.Time #)
  {- Arity: 7, Strictness: <L,U><S,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
d1f12a3758493d137e00fa7410fb7d63
  $wmoveRightSteppedRect ::
    Tetris.Board
    -> [Tetris.Figure]
    -> (Tetris.Speed, Tetris.Time)
    -> Tetris.Score
    -> Tetris.TetrisType
    -> Tetris.TetrisMove
    -> Tetris.Time
    -> (# Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
          Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove, Tetris.Time #)
  {- Arity: 7, Strictness: <L,U><S,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
fe3436059c69a0c8746ca03fd8ec025b
  $wmul8or9 ::
    Tetris.FigureType
    -> Tetris.Direction
    -> Tetris.Coord
    -> (# Tetris.FigureType, Tetris.Direction, Tetris.Coord #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><L,1*U(A,U,U)>,
     Inline: [0] -}
c281e6fbc8262ab58afe05d67e6a148c
  $wnewLevel ::
    Tetris.Board
    -> [Tetris.Figure]
    -> (Tetris.Speed, Tetris.Time)
    -> GHC.Prim.Int#
    -> Tetris.TetrisType
    -> Tetris.TetrisMove
    -> Tetris.Time
    -> (# Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
          Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove, Tetris.Time #)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U(U(U),U)><S,U><L,U><L,U><L,U>,
     Inline: [0] -}
421552dae2c783acdda02647a0c1d964
  $wnewTact ::
    Tetris.Board
    -> [Tetris.Figure]
    -> GHC.Prim.Float#
    -> Tetris.Time
    -> Tetris.Score
    -> Tetris.TetrisType
    -> Tetris.TetrisMove
    -> Tetris.Time
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> (# Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
          Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove, Tetris.Time #)
  {- Arity: 10,
     Strictness: <L,U><L,U><S,U><L,U(U)><L,U(U)><L,U><S,U><L,U><L,U(U)><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Tetris.Board)
                   (ww1 :: [Tetris.Figure])
                   (ww2 :: GHC.Prim.Float#)
                   (ww3 :: Tetris.Time)
                   (ww4 :: Tetris.Score)
                   (ww5 :: Tetris.TetrisType)
                   (ww6 :: Tetris.TetrisMove)
                   (ww7 :: Tetris.Time)
                   (w :: GHC.Types.Float)
                   (w4 :: GHC.Types.Float) ->
                 case ww6 of wild {
                   Tetris.TetrisStepped
                   -> Tetris.$wnewTactStepped
                        ww
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        Tetris.TetrisStepped
                        ww7
                        w
                        w4
                   Tetris.TetrisSmooth
                   -> Tetris.$wnewTactSmooth
                        ww
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        Tetris.TetrisSmooth
                        ww7
                        w
                        w4 }) -}
1d3d95fe70eb29b2148e5fbd769ede3d
  $wnewTactSmooth ::
    Tetris.Board
    -> [Tetris.Figure]
    -> GHC.Prim.Float#
    -> Tetris.Time
    -> Tetris.Score
    -> Tetris.TetrisType
    -> Tetris.TetrisMove
    -> Tetris.Time
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> (# Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
          Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove, Tetris.Time #)
  {- Arity: 10,
     Strictness: <L,U><L,U><S,U><L,U(U)><L,U(U)><L,U><L,U><L,U><L,U(U)><L,U(U)>,
     Inline: [0] -}
e9c7a4434b4146567c5158cc0e247674
  $wnewTactStepped ::
    Tetris.Board
    -> [Tetris.Figure]
    -> GHC.Prim.Float#
    -> Tetris.Time
    -> Tetris.Score
    -> Tetris.TetrisType
    -> Tetris.TetrisMove
    -> Tetris.Time
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> (# Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
          Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove, Tetris.Time #)
  {- Arity: 10,
     Strictness: <L,U><L,U><S,U><L,U(U)><L,U(U)><L,U><L,U><L,U><L,U(U)><L,U(U)>,
     Inline: [0] -}
47b32160ad83bc7899beef493f593b16
  $wonMoveButton ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: GHC.Prim.Float#)
                   (ww3 :: GHC.Types.Float)
                   (ww4 :: GHC.Types.Float)
                   (ww5 :: GHC.Types.Float) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.gtFloat# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww3 of wild1 { GHC.Types.F# y1 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.ltFloat# ww y1) of wild2 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww1 of wild3 { GHC.Types.F# x1 ->
                           case ww4 of wild4 { GHC.Types.F# y2 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.gtFloat# x1 y2) of wild5 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww5 of wild6 { GHC.Types.F# y3 ->
                                GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.ltFloat# x1 y3) } } } } } } }) -}
e6d2fb9c237cf616a711ad659f690c20
  $wonTypeButton ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: GHC.Prim.Float#)
                   (ww3 :: GHC.Types.Float)
                   (ww4 :: GHC.Types.Float)
                   (ww5 :: GHC.Types.Float) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.gtFloat# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww3 of wild1 { GHC.Types.F# y1 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.ltFloat# ww y1) of wild2 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww1 of wild3 { GHC.Types.F# x1 ->
                           case ww4 of wild4 { GHC.Types.F# y2 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.gtFloat# x1 y2) of wild5 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww5 of wild6 { GHC.Types.F# y3 ->
                                GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.ltFloat# x1 y3) } } } } } } }) -}
b4948da8e35af589659e5949dd1e10c6
  $wroundedRect ::
    Graphics.Gloss.Internals.Data.Color.Color
    -> Graphics.Gloss.Internals.Data.Color.Color
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> (# [Graphics.Gloss.Internals.Data.Picture.Picture] #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U(U)><L,U(U)><L,U(U)><L,U(U)>,
     Inline: [0] -}
e08233490f1551d42ab1f94c2114de45
  $wupdateBoard ::
    Tetris.FigureType
    -> Tetris.Direction -> Tetris.Coord -> Tetris.Board -> Tetris.Board
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U><L,U(U(U),U(U),U)><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Tetris.FigureType)
                   (ww1 :: Tetris.Direction)
                   (ww2 :: Tetris.Coord)
                   (w :: Tetris.Board) ->
                 GHC.Base.++
                   @ Tetris.Coord
                   w
                   (case Tetris.$wfigureToDraw
                           ww
                           ww1
                           ww2 of ww3 { (#,,,#) ww4 ww5 ww6 ww7 ->
                    GHC.Types.:
                      @ Tetris.Coord
                      ww4
                      (GHC.Types.:
                         @ Tetris.Coord
                         ww5
                         (GHC.Types.:
                            @ Tetris.Coord
                            ww6
                            (GHC.Types.:
                               @ Tetris.Coord
                               ww7
                               (GHC.Types.[] @ Tetris.Coord)))) })) -}
8962390ebfa9fc4dddfce322624b0c06
  $wupdateTetrisSmooth ::
    GHC.Types.Float
    -> Tetris.Board
    -> [Tetris.Figure]
    -> (Tetris.Speed, Tetris.Time)
    -> Tetris.Score
    -> Tetris.TetrisType
    -> Tetris.TetrisMove
    -> Tetris.Time
    -> (# Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
          Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove, Tetris.Time #)
  {- Arity: 8,
     Strictness: <L,U(U)><S,U><S,U><L,U(U(U),U(U))><L,U(U)><L,U><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Float)
                   (ww :: Tetris.Board)
                   (ww1 :: [Tetris.Figure])
                   (ww2 :: (Tetris.Speed, Tetris.Time))
                   (ww3 :: Tetris.Score)
                   (ww4 :: Tetris.TetrisType)
                   (ww5 :: Tetris.TetrisMove)
                   (ww6 :: Tetris.Time) ->
                 case Tetris.$wisGameOver ww ww1 ww5 of wild {
                   GHC.Types.False
                   -> case ww5 of wild1 {
                        Tetris.TetrisStepped
                        -> case ww2 of ww7 { (,) ww8 ww9 ->
                           case ww8 of ww10 { GHC.Types.F# ww11 ->
                           case Tetris.$wnewTactStepped
                                  ww
                                  ww1
                                  ww11
                                  ww9
                                  ww3
                                  ww4
                                  Tetris.TetrisStepped
                                  ww6
                                  w
                                  ww10 of ww12 { (#,,,,,,#) ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                           case ww16 of ww20 { GHC.Types.I# ww21 ->
                           Tetris.$wnewLevel ww13 ww14 ww15 ww21 ww17 ww18 ww19 } } } }
                        Tetris.TetrisSmooth
                        -> case ww2 of ww7 { (,) ww8 ww9 ->
                           case ww8 of ww10 { GHC.Types.F# ww11 ->
                           case Tetris.$wnewTactSmooth
                                  ww
                                  ww1
                                  ww11
                                  ww9
                                  ww3
                                  ww4
                                  Tetris.TetrisSmooth
                                  ww6
                                  w
                                  ww10 of ww12 { (#,,,,,,#) ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                           case ww16 of ww20 { GHC.Types.I# ww21 ->
                           Tetris.$wnewLevel ww13 ww14 ww15 ww21 ww17 ww18 ww19 } } } } }
                   GHC.Types.True
                   -> (# GHC.Types.[] @ Tetris.Coord,
                         case ww1 of wild1 {
                           [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs },
                         Tetris.updateTetrisSmooth1, Tetris.chMoving1, ww4, ww5,
                         Tetris.inintTactSmooth #) }) -}
f7f29f2cf9535f2bb1728b5a6200ddee
  $wupdateTetrisStepped ::
    GHC.Types.Float
    -> Tetris.Board
    -> [Tetris.Figure]
    -> (Tetris.Speed, Tetris.Time)
    -> Tetris.Score
    -> Tetris.TetrisType
    -> Tetris.TetrisMove
    -> Tetris.Time
    -> (# Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
          Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove, Tetris.Time #)
  {- Arity: 8,
     Strictness: <L,U(U)><S,U><S,U><L,U(U(U),U(U))><L,U(U)><L,U><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Float)
                   (ww :: Tetris.Board)
                   (ww1 :: [Tetris.Figure])
                   (ww2 :: (Tetris.Speed, Tetris.Time))
                   (ww3 :: Tetris.Score)
                   (ww4 :: Tetris.TetrisType)
                   (ww5 :: Tetris.TetrisMove)
                   (ww6 :: Tetris.Time) ->
                 case Tetris.$wisGameOver ww ww1 ww5 of wild {
                   GHC.Types.False
                   -> case ww5 of wild1 {
                        Tetris.TetrisStepped
                        -> case ww2 of ww7 { (,) ww8 ww9 ->
                           case ww8 of ww10 { GHC.Types.F# ww11 ->
                           case Tetris.$wnewTactStepped
                                  ww
                                  ww1
                                  ww11
                                  ww9
                                  ww3
                                  ww4
                                  Tetris.TetrisStepped
                                  ww6
                                  w
                                  ww10 of ww12 { (#,,,,,,#) ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                           case ww16 of ww20 { GHC.Types.I# ww21 ->
                           Tetris.$wnewLevel ww13 ww14 ww15 ww21 ww17 ww18 ww19 } } } }
                        Tetris.TetrisSmooth
                        -> case ww2 of ww7 { (,) ww8 ww9 ->
                           case ww8 of ww10 { GHC.Types.F# ww11 ->
                           case Tetris.$wnewTactSmooth
                                  ww
                                  ww1
                                  ww11
                                  ww9
                                  ww3
                                  ww4
                                  Tetris.TetrisSmooth
                                  ww6
                                  w
                                  ww10 of ww12 { (#,,,,,,#) ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                           case ww16 of ww20 { GHC.Types.I# ww21 ->
                           Tetris.$wnewLevel ww13 ww14 ww15 ww21 ww17 ww18 ww19 } } } } }
                   GHC.Types.True
                   -> (# GHC.Types.[] @ Tetris.Coord,
                         case ww1 of wild1 {
                           [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs },
                         Tetris.genUniverse1, Tetris.chMoving1, ww4, ww5,
                         Tetris.inintTactStepped #) }) -}
fbddc14171e357b5bfc2e9506a6efcbd
  data Block = Free | Full
90771c5604c1c543099853199c65617c
  type BlockedFigure =
    (Tetris.Coord, Tetris.Coord, Tetris.Coord, Tetris.Coord)
c63465955cea6ba2d10543ecdc251460
  type Board = [Tetris.Coord]
99f19f0443560faa2cef28fca4f65064
  data Coord
    = Coord {x :: GHC.Types.Int,
             y :: GHC.Types.Int,
             clr :: GHC.Types.Int}
11a31f75d1c4a89e9b2ab0be45d288bb
  type Coord1 = (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
0490230f3d1931c049a1bd91d0deb018
  data Direction = DUp | DDown | DLeft | DRight
4cdf3c4e1016e46da2ae8d0426b86e97
  data Figure
    = Figure Tetris.FigureType Tetris.Direction Tetris.Coord
c71af956c94de50ad57659cad7749b33
  data FigureType = O | I | T | J | L | S | Z
add0dadd7cb8c96ce21d961418af78b7
  data GameState
    = GameState {board :: Tetris.Board,
                 figure :: [Tetris.Figure],
                 speedandtime :: (Tetris.Speed, Tetris.Time),
                 score :: Tetris.Score,
                 typerepres :: Tetris.TetrisType,
                 typemoving :: Tetris.TetrisMove,
                 tactgamestate :: Tetris.Time}
535bb6c09e390397fc73986a132bf62b
  type Gamestate =
    (Tetris.Board, [Tetris.Figure], (Tetris.Speed, Tetris.Time),
     Tetris.Score, Tetris.TetrisType, Tetris.TetrisMove, Tetris.Time)
c92b1325dda070c737b816c106eb17e1
  type Row = [Tetris.Block]
1587419178d21174115342833e87f878
  type Score = GHC.Types.Int
de3d040d1937bb741c2c5553ca40e6a1
  type Speed = GHC.Types.Float
d6d18b6693bd687e744eb7459cdfcfe3
  data TetrisMove = TetrisStepped | TetrisSmooth
8de7e6d32445e729c0692b7207d9b96f
  data TetrisType = TetrisRect | TetrisRound
e0dcb036f07ceaa82ea9ee810ee4ce60
  type Time = GHC.Types.Float
674059165469af5f772446a514a5a6f4
  alpha :: GHC.Types.Float
  {- Strictness: m, Unfolding: (Tetris.inintTactStepped) -}
2e4655609536818aa9a966adcf084cc0
  angle :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 36.0#) -}
881bc9bed5565cef6ce06d31454745ac
  bl :: Tetris.Figure -> Tetris.Figure
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(U,U,1*U(A,U,U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.Figure) ->
                 case w of ww { Tetris.Figure ww1 ww2 ww3 ->
                 case Tetris.$wbl ww1 ww2 ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Tetris.Figure ww5 ww6 ww7 } }) -}
d1956f97187ca037d2f8e011df2604ba
  blockSize :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 30#) -}
c98d526f64e5c346a010e47211630094
  blockSizeFloat :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 30.0#) -}
3db22dc275aa96784f7226e53fbd112e
  board :: Tetris.GameState -> Tetris.Board
  RecSel Left Tetris.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.GameState) ->
                 case ds of wild { Tetris.GameState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds1 }) -}
5326fff9f008110490575122e1219d5e
  boardMoveDown :: Tetris.Board -> Tetris.Board
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
bdd36785800198468807fe11bf782ed7
  chMoving :: Tetris.GameState -> Tetris.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,1*U,A,A,U,1*U,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.GameState) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww6 of wild {
                   Tetris.TetrisStepped
                   -> Tetris.GameState
                        (GHC.Types.[] @ Tetris.Coord)
                        (case ww2 of wild1 {
                           [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs })
                        (Tetris.inintTactSmooth, Tetris.transCircleBack)
                        Tetris.chMoving1
                        ww5
                        Tetris.TetrisSmooth
                        Tetris.inintTactSmooth
                   Tetris.TetrisSmooth
                   -> Tetris.GameState
                        (GHC.Types.[] @ Tetris.Coord)
                        (case ww2 of wild1 {
                           [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs })
                        (Tetris.inintTactStepped, Tetris.transCircleBack)
                        Tetris.chMoving1
                        ww5
                        Tetris.TetrisSmooth
                        Tetris.inintTactStepped } }) -}
56befabb32e8367ab13282ab19615b65
  chMoving1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
5b548d43cbba2fc1d5d060635ecf524e
  chRotation :: Tetris.Figure -> Tetris.Figure
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(U,1*U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.Figure) ->
                 case w of ww { Tetris.Figure ww1 ww2 ww3 ->
                 case ww2 of wild {
                   Tetris.DUp -> Tetris.Figure ww1 Tetris.DRight ww3
                   Tetris.DDown -> Tetris.Figure ww1 Tetris.DLeft ww3
                   Tetris.DLeft -> Tetris.Figure ww1 Tetris.DUp ww3
                   Tetris.DRight -> Tetris.Figure ww1 Tetris.DDown ww3 } }) -}
ce18eb148b6da2cc2ee5c347632644f8
  chSpeedAndTime ::
    (Tetris.Speed, Tetris.Time)
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> (Tetris.Speed, Tetris.Time)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(U,1*U(U))><L,1*U(U)><L,1*U(U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: (Tetris.Speed, Tetris.Time))
                   (tact :: GHC.Types.Float)
                   (dt :: GHC.Types.Float) ->
                 case ds of wild { (,) sp ti ->
                 (sp,
                  case ti of wild1 { GHC.Types.F# x1 ->
                  case dt of wild2 { GHC.Types.F# y1 ->
                  case tact of wild3 { GHC.Types.F# x2 ->
                  GHC.Types.F#
                    (GHC.Prim.plusFloat#
                       (GHC.Prim.plusFloat# x1 y1)
                       (GHC.Prim.timesFloat# x2 0.3#)) } } }) }) -}
6d8873155614f24939bb3cb336233eda
  chZ :: (Tetris.Speed, Tetris.Time) -> (Tetris.Speed, Tetris.Time)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Tetris.Speed, Tetris.Time)) ->
                 case ds of wild { (,) sp ds1 -> (sp, Tetris.chZ1) }) -}
85cf8e9ab3c1faaf1157a1546aa4cdb7
  chZ1 :: GHC.Types.Float
  {- Strictness: m, Unfolding: (Tetris.transCircleBack) -}
64628bdcc8aff86a143fdeb4f63072d9
  clr :: Tetris.Coord -> GHC.Types.Int
  RecSel Left Tetris.Coord
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.Coord) ->
                 case ds of wild { Tetris.Coord ds1 ds2 ds3 -> ds3 }) -}
503e7fba5a7f1bacae2a47c62679cfec
  collidesBlock :: Tetris.Coord -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),A)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.Coord) ->
                 case w of ww { Tetris.Coord ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.I# ww5 ->
                 Tetris.$wcollidesBlock ww5 ww2 } }) -}
a31d83b96c8354da498674de8da089c4
  collidesBlockDown :: Tetris.Coord -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(S)L),1*U(U(U),U(U),A)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Tetris.Coord) (w4 :: Tetris.Board) ->
                 case w of ww { Tetris.Coord ww1 ww2 ww3 ->
                 case ww2 of ww4 { GHC.Types.I# ww5 ->
                 Tetris.$wcollidesBlockDown ww1 ww5 w4 } }) -}
237ad0a7d3b05cb53c4f789aa45bee7c
  collidesBlockDownSmooth ::
    Tetris.Coord -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(S)L),1*U(U(U),U(U),A)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Tetris.Coord) (w4 :: Tetris.Board) ->
                 case w of ww { Tetris.Coord ww1 ww2 ww3 ->
                 case ww2 of ww4 { GHC.Types.I# ww5 ->
                 Tetris.$wcollidesBlockDownSmooth ww1 ww5 w4 } }) -}
259afbcf951a0bdbcd4c4da430bffb60
  collidesBlockSides ::
    Tetris.Coord -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(U(U),U(U),A)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Tetris.Coord) (w4 :: Tetris.Board) ->
                 case w of ww { Tetris.Coord ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.I# ww5 ->
                 Tetris.$wcollidesBlockSides ww5 ww2 w4 } }) -}
fe67b5546206de09145d1b134badf647
  collidesBlockSidesSmooth ::
    Tetris.Coord -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(U(U),U(U),A)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Tetris.Coord) (w4 :: Tetris.Board) ->
                 case w of ww { Tetris.Coord ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.I# ww5 ->
                 Tetris.$wcollidesBlockSidesSmooth ww5 ww2 w4 } }) -}
c15e93ee3f94c74be89617917b96e7fd
  collidesBlockSidesWhallLeft ::
    Tetris.Coord -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),A,A)><L,A>,
     Unfolding: InlineRule (2, True, False)
                (\ (u :: Tetris.Coord) (ds :: Tetris.Board) ->
                 case u of wild { Tetris.Coord ds1 ds2 ds3 ->
                 case ds1 of wild1 { GHC.Types.I# x1 ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# x1 0#) } }) -}
61c279d437d59d7c488c31cfb6a58f06
  collidesBlockSidesWhallRight ::
    Tetris.Coord -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),A,A)><L,A>,
     Unfolding: InlineRule (2, True, False)
                (\ (u :: Tetris.Coord) (ds :: Tetris.Board) ->
                 case u of wild { Tetris.Coord ds1 ds2 ds3 ->
                 case ds1 of wild1 { GHC.Types.I# x1 ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.># (GHC.Prim.+# x1 30#) 300#) } }) -}
69b887738492f34c91f3bc1c5482dfe3
  collidesBlockUp :: Tetris.Coord -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(S)L),1*U(A,U(U),A)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Tetris.Coord) (w4 :: Tetris.Board) ->
                 case w of ww { Tetris.Coord ww1 ww2 ww3 ->
                 case ww2 of ww4 { GHC.Types.I# ww5 ->
                 Tetris.$wcollidesBlockUp ww5 w4 } }) -}
ea384dee53e06cb4590933e5e070dcf6
  collidesFigure ::
    Tetris.BlockedFigure -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)LL)LLL),1*U(U(U(U),U(U),A),U(U(U),U(U),A),U(U(U),U(U),A),U(U(U),U(U),A))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Tetris.BlockedFigure) (w4 :: Tetris.Board) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Tetris.Coord ww6 ww7 ww8 ->
                 case ww6 of ww9 { GHC.Types.I# ww10 ->
                 Tetris.$wcollidesFigure ww10 ww7 ww2 ww3 ww4 w4 } } }) -}
514f8a870bc1491fe8915cea354666f6
  collidesFigureDown ::
    Tetris.BlockedFigure -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LS(S)L)LLL),1*U(1*U(U(U),U(U),A),1*U(U(U),U(U),A),1*U(U(U),U(U),A),1*U(U(U),U(U),A))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Tetris.BlockedFigure) (w4 :: Tetris.Board) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Tetris.Coord ww6 ww7 ww8 ->
                 case ww7 of ww9 { GHC.Types.I# ww10 ->
                 Tetris.$wcollidesFigureDown ww6 ww10 ww2 ww3 ww4 w4 } } }) -}
41e7cc5c0e8a58cfdef33c75e99276fe
  collidesFigureDownSmooth ::
    Tetris.BlockedFigure -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LS(S)L)LLL),1*U(1*U(U(U),U(U),A),1*U(U(U),U(U),A),1*U(U(U),U(U),A),1*U(U(U),U(U),A))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Tetris.BlockedFigure) (w4 :: Tetris.Board) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Tetris.Coord ww6 ww7 ww8 ->
                 case ww7 of ww9 { GHC.Types.I# ww10 ->
                 Tetris.$wcollidesFigureDownSmooth ww6 ww10 ww2 ww3 ww4 w4 } } }) -}
eb11287b52d31123bf382c4f056e097b
  collidesFigureSides ::
    Tetris.BlockedFigure -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)LL)LLL),1*U(1*U(U(U),U(U),A),1*U(U(U),U(U),A),1*U(U(U),U(U),A),1*U(U(U),U(U),A))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Tetris.BlockedFigure) (w4 :: Tetris.Board) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Tetris.Coord ww6 ww7 ww8 ->
                 case ww6 of ww9 { GHC.Types.I# ww10 ->
                 Tetris.$wcollidesFigureSides ww10 ww7 ww2 ww3 ww4 w4 } } }) -}
d8a5358cc5547e78964c6784b1f91953
  collidesFigureSidesSmooth ::
    Tetris.BlockedFigure -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)LL)LLL),1*U(1*U(U(U),U(U),A),1*U(U(U),U(U),A),1*U(U(U),U(U),A),1*U(U(U),U(U),A))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Tetris.BlockedFigure) (w4 :: Tetris.Board) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Tetris.Coord ww6 ww7 ww8 ->
                 case ww6 of ww9 { GHC.Types.I# ww10 ->
                 Tetris.$wcollidesFigureSidesSmooth
                   ww10
                   ww7
                   ww2
                   ww3
                   ww4
                   w4 } } }) -}
e4229f52204ae98f0b790005b91c80a4
  collidesFigureSidesWallLeft ::
    Tetris.BlockedFigure -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)LL)LLL),1*U(1*U(1*U(U),A,A),1*U(1*U(U),A,A),1*U(1*U(U),A,A),1*U(1*U(U),A,A))><L,A>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Tetris.BlockedFigure) (w4 :: Tetris.Board) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Tetris.Coord ww6 ww7 ww8 ->
                 case ww6 of ww9 { GHC.Types.I# ww10 ->
                 Tetris.$wcollidesFigureSidesWallLeft ww10 ww2 ww3 ww4 } } }) -}
de93751a4a0daa18054785df8167666d
  collidesFigureSidesWallRight ::
    Tetris.BlockedFigure -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)LL)LLL),1*U(1*U(1*U(U),A,A),1*U(1*U(U),A,A),1*U(1*U(U),A,A),1*U(1*U(U),A,A))><L,A>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Tetris.BlockedFigure) (w4 :: Tetris.Board) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Tetris.Coord ww6 ww7 ww8 ->
                 case ww6 of ww9 { GHC.Types.I# ww10 ->
                 Tetris.$wcollidesFigureSidesWallRight ww10 ww2 ww3 ww4 } } }) -}
563eb65f40ee02fbafcd8cf401929e2f
  collidesFigureSmooth ::
    Tetris.BlockedFigure -> Tetris.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)LL)LLL),1*U(U(U(U),U(U),A),U(U(U),U(U),A),U(U(U),U(U),A),U(U(U),U(U),A))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Tetris.BlockedFigure) (w4 :: Tetris.Board) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Tetris.Coord ww6 ww7 ww8 ->
                 case ww6 of ww9 { GHC.Types.I# ww10 ->
                 Tetris.$wcollidesFigureSmooth ww10 ww7 ww2 ww3 ww4 w4 } } }) -}
ac2973be80f34d1517f2296ede753416
  conCircle :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 123.0#) -}
e7a4b7dc8584c10e8501584b942a34af
  conCircleB :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 205.0#) -}
8a57f38640dbdb9cd25ac81f0b061b9d
  conRecMenu :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 113.0#) -}
85b28e48204a2209b6cbe6abbd3d7233
  conSmooth :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 225.0#) -}
f546309bae8e5026e11c005c7f14459a
  cons :: Tetris.Figure -> [Tetris.Figure] -> [Tetris.Figure]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                (GHC.Types.: @ Tetris.Figure) -}
1f32bcfb04f689217bf2454a8e17808f
  consCircBack :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 43.0#) -}
976ee38f4fbc9639b51916392f39526f
  consCircBackTwo :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 53.0#) -}
06cb6678f880346cf15946d2c17a20e9
  deleteRows :: Tetris.Board -> Tetris.Board
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
7d942d83775576fb0b3238c433e6623c
  drawBlock ::
    Tetris.Coord -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, Strictness: <L,U(1*U(U),1*U(U),1*U(1*U))>m14,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.Coord) ->
                 case Tetris.$wdrawBlock w of ww { Unit# ww1 ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures ww1 }) -}
5ed80a454776e53e193588fc66422d1d
  drawBlock1 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# -150.0#) -}
e7e2706f2675ad06640016c7eeb4824d
  drawBlockCircle ::
    Tetris.Coord1 -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, Strictness: <S(S(S)LL),1*U(1*U(1*U),U(U),1*U(1*U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.Coord1) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.I# ww5 ->
                 Tetris.$wdrawBlockCircle ww5 ww2 ww3 } }) -}
5c2375d58e23d78034a6c2a5c6bed7f7
  drawBlockCircleHelp ::
    Tetris.Coord -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, Strictness: <S(S(S)LL),1*U(1*U(1*U),U(U),1*U(1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (u :: Tetris.Coord) ->
                 case u of wild { Tetris.Coord ds ds1 ds2 ->
                 Tetris.drawBlockCircle (ds, ds1, ds2) }) -}
f46838b4225c46423ab3ddef6995d875
  drawBlockedFigure ::
    Tetris.BlockedFigure
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1,
     Strictness: <S,1*U(U(U(U),U(U),U(U)),U(U(U),U(U),U(U)),U(U(U),U(U),U(U)),U(U(U),U(U),U(U)))>m14,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.BlockedFigure) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures
                   (GHC.Types.:
                      @ Graphics.Gloss.Internals.Data.Picture.Picture
                      (Tetris.drawBlock ww1)
                      (GHC.Types.:
                         @ Graphics.Gloss.Internals.Data.Picture.Picture
                         (Tetris.drawBlock ww2)
                         (GHC.Types.:
                            @ Graphics.Gloss.Internals.Data.Picture.Picture
                            (Tetris.drawBlock ww3)
                            (GHC.Types.:
                               @ Graphics.Gloss.Internals.Data.Picture.Picture
                               (Tetris.drawBlock ww4)
                               (GHC.Types.[]
                                  @ Graphics.Gloss.Internals.Data.Picture.Picture))))) }) -}
b433d76a573591dec9da6825a4340a9c
  drawBlockedFigureCircle ::
    Tetris.BlockedFigure
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U(1*U),U(U),1*U(1*U)),1*U(1*U(1*U),U(U),1*U(1*U)),1*U(1*U(1*U),U(U),1*U(1*U)),1*U(1*U(1*U),U(U),1*U(1*U)))>m14,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.BlockedFigure) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 case Tetris.$wdrawBlockedFigureCircle
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { Unit# ww6 ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures ww6 } }) -}
9158b87839b45cc2d77e422433469d72
  drawBoard ::
    Tetris.Board -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, Strictness: <L,1*U>m14,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: Tetris.Board) ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures
                   (GHC.Base.build
                      @ Graphics.Gloss.Internals.Data.Picture.Picture
                      (\ @ b1
                         (c :: Graphics.Gloss.Internals.Data.Picture.Picture
                               -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ Tetris.Coord
                         @ b1
                         (GHC.Base.mapFB
                            @ Graphics.Gloss.Internals.Data.Picture.Picture
                            @ b1
                            @ Tetris.Coord
                            c
                            Tetris.drawBlock)
                         n
                         s))) -}
e11fb3ac2979144e279349924a738ff9
  drawBoardCircle ::
    Tetris.Board -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, Strictness: <L,1*U>m14,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: Tetris.Board) ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures
                   (GHC.Base.build
                      @ Graphics.Gloss.Internals.Data.Picture.Picture
                      (\ @ b1
                         (c :: Graphics.Gloss.Internals.Data.Picture.Picture
                               -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ Tetris.Coord
                         @ b1
                         (GHC.Base.mapFB
                            @ Graphics.Gloss.Internals.Data.Picture.Picture
                            @ b1
                            @ Tetris.Coord
                            c
                            Tetris.drawBlockCircleHelp)
                         n
                         s))) -}
bcfbb66f4f62caf84df1448481125dc2
  drawCircleBackGr :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m11,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Translate
                   Tetris.transCircleBack
                   Tetris.transtBackGround
                   Tetris.drawCircleBackGr1) -}
c96686ac5fff8404a91e716c4bb60a9c
  drawCircleBackGr1 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m13,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Scale
                   Tetris.scaleBackGr
                   Tetris.scaleBackGr
                   Tetris.drawCircleBackGr2) -}
de67d7ccf014a7e4e527393b0c86102b
  drawCircleBackGr2 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m10,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Color
                   Graphics.Gloss.Data.Color.cyan
                   Tetris.drawCircleBackGr3) -}
6f1f9537b5bec09adbc6f348b5484d61
  drawCircleBackGr3 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Circle
                   Tetris.conCircleB) -}
ae254f0c8bcba8fab1a77dec25cf442d
  drawFigure ::
    Tetris.GameState -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, Strictness: <S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>m14,
     Unfolding: InlineRule (1, True, False)
                (\ (u :: Tetris.GameState) ->
                 case u of wild { Tetris.GameState ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 case ds1 of wild1 {
                   []
                   -> Tetris.drawBlockedFigure
                        (Tetris.figureToDraw Tetris.drawFigure1)
                   : f ds7 -> Tetris.drawBlockedFigure (Tetris.figureToDraw f) } }) -}
dc9c94e1125c40e170abab944eaa2dab
  drawFigure1 :: Tetris.Figure
  {- Strictness: m,
     Unfolding: (Tetris.Figure
                   Tetris.T
                   Tetris.DUp
                   Tetris.drawFigure2) -}
a47c6608d5efdcb8dbfa6418a204240b
  drawFigure2 :: Tetris.Coord
  {- Strictness: m,
     Unfolding: (Tetris.Coord
                   Tetris.drawFigure3
                   Tetris.glob_fps
                   Tetris.chMoving1) -}
2bc9ea191425682ed4fdd320beba2bd6
  drawFigure3 :: GHC.Types.Int
  {- Unfolding: (case GHC.Classes.divInt# 300# 2# of ww4 { DEFAULT ->
                 GHC.Types.I# ww4 }) -}
4b9cf640c63501267f36559481a343ef
  drawFigureCircle ::
    Tetris.GameState -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, Strictness: <S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>m14,
     Unfolding: InlineRule (1, True, False)
                (\ (u :: Tetris.GameState) ->
                 case u of wild { Tetris.GameState ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 case ds1 of wild1 {
                   []
                   -> Tetris.drawBlockedFigureCircle
                        (Tetris.figureToDraw Tetris.drawFigure1)
                   : f ds7
                   -> Tetris.drawBlockedFigureCircle (Tetris.figureToDraw f) } }) -}
c10d133ff026a2ef28393d363be1628c
  drawRectanglBackGr :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m14,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Pictures
                   Tetris.drawRectanglBackGr1) -}
427ab59c6241ed666e3c4b15bd8f65c8
  drawRectanglBackGr1 ::
    [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Tetris.drawRectanglBackGr2
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture)) -}
66207a933792ac505ab95aec84625f4f
  drawRectanglBackGr10 ::
    [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Tetris.drawRectanglBackGr11
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Point)) -}
8c0763b1066671942b42c9f265262701
  drawRectanglBackGr11 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Tetris.transCircleBack, Tetris.transCircleBack)) -}
e48e6200825f9c409c1fcb4b2707427a
  drawRectanglBackGr12 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Tetris.screenWidthFloat, Tetris.transCircleBack)) -}
f8d7e5b0eacc2e323ec29aceb8aeaefe
  drawRectanglBackGr13 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Tetris.screenWidthFloat,
                  Tetris.drawRectanglBackGr14)) -}
c1c82ac0c0427f95c9ebf22d11fd5944
  drawRectanglBackGr14 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# -600.0#) -}
a253e88ca292c2670cf0b12c5bf044ce
  drawRectanglBackGr15 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Tetris.transCircleBack,
                  Tetris.drawRectanglBackGr14)) -}
53f3d993f9758473e37f6cda9ab5ef1e
  drawRectanglBackGr2 ::
    Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m11,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Translate
                   Tetris.drawBlock1
                   Tetris.screenWidthFloat
                   Tetris.drawRectanglBackGr3) -}
9361a4c620b82e03d5a42a6e5fedf521
  drawRectanglBackGr3 ::
    Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m13,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Scale
                   Tetris.scaleBackGrTwo
                   Tetris.scaleBackGrTwo
                   Tetris.drawRectanglBackGr4) -}
c4b0f16a416ac082a5053b7cc73119c1
  drawRectanglBackGr4 ::
    Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m10,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Color
                   Graphics.Gloss.Data.Color.cyan
                   Tetris.drawRectanglBackGr5) -}
87446816822f6ae10c75992b15772461
  drawRectanglBackGr5 ::
    Graphics.Gloss.Internals.Data.Picture.Picture
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Line
                   Tetris.drawRectanglBackGr6) -}
cfd578830fc980b4023471fce9c11cc4
  drawRectanglBackGr6 ::
    [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Tetris.drawRectanglBackGr11
                   Tetris.drawRectanglBackGr7) -}
ea6ad2a812af111a369e9c6475b51aeb
  drawRectanglBackGr7 ::
    [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Tetris.drawRectanglBackGr15
                   Tetris.drawRectanglBackGr8) -}
077d8c3c86d28f50c089937ab7040090
  drawRectanglBackGr8 ::
    [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Tetris.drawRectanglBackGr13
                   Tetris.drawRectanglBackGr9) -}
bd40eab8410d1b56ad5c41a0b0b4ed8d
  drawRectanglBackGr9 ::
    [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Tetris.drawRectanglBackGr12
                   Tetris.drawRectanglBackGr10) -}
9e76a07c5df12d3b7882d2a87f181e44
  drawRectangleMenu :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m11,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Translate
                   Tetris.drawRectangleMenu8
                   Tetris.drawRectangleMenu7
                   Tetris.drawRectangleMenu1) -}
68f13d3ad3b15e75505761e790156e32
  drawRectangleMenu1 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Unfolding: (case Tetris.$wroundedRect
                        Tetris.drawRectangleMenu6
                        Tetris.drawRectangleMenu5
                        Tetris.drawRectangleMenu4
                        Tetris.drawRectangleMenu3
                        Tetris.translMenu2
                        Tetris.drawRectangleMenu2 of ww { Unit# ww1 ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures ww1 }) -}
007f15dd2f15e0c896e1e6ec6cc4b224
  drawRectangleMenu2 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# 3.0#) -}
47e7928f70e8068470a52df17bfbb1fb
  drawRectangleMenu3 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# 62.666668#) -}
cc9252ab21131ed5e52f3e217ac2c339
  drawRectangleMenu4 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# 118.0#) -}
db6fe6f810d74ae78940ca1ad21e9f2b
  drawRectangleMenu5 :: Graphics.Gloss.Internals.Data.Color.Color
  {- HasNoCafRefs,
     Unfolding: (Graphics.Gloss.Internals.Data.Color.RGBA
                   0.7#
                   0.7#
                   0.7#
                   1.0#) -}
ad0f1dfb2293175748689533294bbce2
  drawRectangleMenu6 :: Graphics.Gloss.Internals.Data.Color.Color
  {- HasNoCafRefs,
     Unfolding: (Graphics.Gloss.Internals.Data.Color.RGBA
                   1.0#
                   1.0#
                   1.0#
                   0.7#) -}
d026d11d8a14d12e8ff0b94810b63f92
  drawRectangleMenu7 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 267.0#) -}
b086b0fe80f8b67b6e3a3e86f519e7ae
  drawRectangleMenu8 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 90.5#) -}
cccfa21b88ac1bc3e8146ef4bec111ca
  drawScore ::
    Tetris.Score -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>m11,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.Score) ->
                 Graphics.Gloss.Internals.Data.Picture.Translate
                   Tetris.drawBlock1
                   Tetris.screenWidthFloat
                   (Graphics.Gloss.Internals.Data.Picture.Scale
                      Tetris.blockSizeFloat
                      Tetris.blockSizeFloat
                      (Graphics.Gloss.Internals.Data.Picture.Pictures
                         (GHC.Types.:
                            @ Graphics.Gloss.Internals.Data.Picture.Picture
                            (Graphics.Gloss.Internals.Data.Picture.Translate
                               Tetris.thicknessTwo
                               Tetris.translateT
                               (Graphics.Gloss.Internals.Data.Picture.Scale
                                  Tetris.inintTactSmooth
                                  Tetris.inintTactSmooth
                                  (Graphics.Gloss.Internals.Data.Picture.Color
                                     Graphics.Gloss.Data.Color.green
                                     (Graphics.Gloss.Internals.Data.Picture.Text
                                        (GHC.Show.$fShowInt_$cshow w)))))
                            (GHC.Types.[]
                               @ Graphics.Gloss.Internals.Data.Picture.Picture))))) -}
cf75d24a4cc12dc8f194fec7e9eed758
  drawTetris ::
    Tetris.GameState -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1,
     Strictness: <S(LLLLSLL),1*U(1*U,1*U,A,1*U(U),1*U,A,A)>m14,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.GameState) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case Tetris.$wdrawTetris ww1 ww2 ww4 ww5 of ww8 { Unit# ww9 ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures ww9 } }) -}
1eb00788716b230621ee0f8960664606
  drawTetris1 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Tetris.drawCircleBackGr
                   Tetris.drawTetris2) -}
e4bc12b5bfcc24295dafdf2f07b060c5
  drawTetris10 :: [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Tetris.drawTetris18
                   Tetris.drawTetris11) -}
24460bd73c9b4c5880a049d520b30bda
  drawTetris11 :: [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Tetris.drawTetris16
                   Tetris.drawTetris12) -}
778b62018c6750430064183e3c279a18
  drawTetris12 :: [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Tetris.drawTetris13
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Point)) -}
f74970858ee7af2819604e171b3619ad
  drawTetris13 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Tetris.drawTetris15, Tetris.drawTetris14)) -}
9ac69f528d97e86fb02e84ab4700a585
  drawTetris14 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 290.0#) -}
e149c3638e78727e22608081f6526640
  drawTetris15 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 148.0#) -}
45ec8c8b8a0bbf425eeacf7f1248c887
  drawTetris16 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Tetris.drawTetris15, Tetris.drawTetris17)) -}
f4da59c31b4169996e67666cc65b3679
  drawTetris17 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 250.0#) -}
e443551e49a6dfd627268b40a4da065b
  drawTetris18 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Tetris.drawTetris19, Tetris.drawTetris17)) -}
0d2bb436f67ce04adaaa859c090fef98
  drawTetris19 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 101.0#) -}
3d52e9d990a4555a830ea87e35b49be1
  drawTetris2 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Tetris.drawRectangleMenu
                   Tetris.drawTetris3) -}
d2f68a95b20e3e1ba736d8425a902466
  drawTetris20 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Tetris.drawTetris19, Tetris.drawTetris14)) -}
11f2c293127eac38c616c12fcf0adc39
  drawTetris21 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m10,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Color
                   Graphics.Gloss.Data.Color.yellow
                   Tetris.drawTetris22) -}
640a52e7ab78ff2cb9fb188eea2dfca2
  drawTetris22 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Polygon
                   Tetris.drawTetris23) -}
8bd1f0ad4ec9f91459bacb108d821a6d
  drawTetris23 :: [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Tetris.drawTetris31
                   Tetris.drawTetris24) -}
cf13af4531d098234e06f58496978aab
  drawTetris24 :: [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Tetris.drawTetris29
                   Tetris.drawTetris25) -}
bf2d1bc52c36d34cd1c07ee674184af4
  drawTetris25 :: [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Tetris.drawTetris28
                   Tetris.drawTetris26) -}
5c5bc6081d4e22c726fa79ac74070af0
  drawTetris26 :: [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Tetris.drawTetris27
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Point)) -}
03ec09769489e221ef01ef49340807eb
  drawTetris27 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Tetris.offset2, Tetris.drawTetris14)) -}
a4bd55a61b3164415caec3e97388c156
  drawTetris28 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Tetris.offset2, Tetris.drawTetris17)) -}
f05e6b4513ff2ff272c5934a2ee34dd9
  drawTetris29 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Tetris.drawTetris30, Tetris.drawTetris17)) -}
709e69286943ac99019caa8b02a03f91
  drawTetris3 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Tetris.drawTetris21
                   Tetris.drawTetris4) -}
5f45820a1e94c987c3a970394f2d6686
  drawTetris30 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 34.0#) -}
33b174d2ab521600be5162d6bc0a3ef8
  drawTetris31 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Tetris.drawTetris30, Tetris.drawTetris14)) -}
9a2bfa5ada87751038bb7b392ce1aa56
  drawTetris32 ::
    Tetris.FigureType
    -> Tetris.Direction
    -> Tetris.Coord
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 3,
     Unfolding: (\ (ww :: Tetris.FigureType)[OneShot]
                   (ww1 :: Tetris.Direction)[OneShot]
                   (ww2 :: Tetris.Coord)[OneShot] ->
                 case Tetris.$wfigureToDraw
                        ww
                        ww1
                        ww2 of ww3 { (#,,,#) ww4 ww5 ww6 ww7 ->
                 case Tetris.$wdrawBlockedFigureCircle
                        ww4
                        ww5
                        ww6
                        ww7 of ww8 { Unit# ww9 ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures ww9 } }) -}
5c727c75917d355f3bce6789f9eb5254
  drawTetris33 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Unfolding: (case Tetris.$wdrawBlockedFigureCircle
                        (Tetris.Coord Tetris.drawTetris36 Tetris.glob_fps Tetris.chMoving1)
                        Tetris.drawFigure2
                        (Tetris.Coord Tetris.drawTetris35 Tetris.glob_fps Tetris.chMoving1)
                        (Tetris.Coord
                           Tetris.drawFigure3
                           Tetris.drawTetris34
                           Tetris.chMoving1) of ww { Unit# ww1 ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures ww1 }) -}
91dc586c725974746c92dca8324c8057
  drawTetris34 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 90#) -}
06e8044b1fc1b2b94adc7671350d514a
  drawTetris35 :: GHC.Types.Int
  {- Unfolding: (case Tetris.drawFigure3 of wild { GHC.Types.I# x1 ->
                 GHC.Types.I# (GHC.Prim.+# x1 30#) }) -}
865be8d0a3a793ffb56dc6e220cf66f5
  drawTetris36 :: GHC.Types.Int
  {- Unfolding: (case Tetris.drawFigure3 of wild { GHC.Types.I# x1 ->
                 GHC.Types.I# (GHC.Prim.-# x1 30#) }) -}
0ec87491d4033f0711edb7835e78d422
  drawTetris37 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Tetris.drawRectangleMenu
                   Tetris.drawTetris38) -}
19bdb04823ddb895cb272766488fcfce
  drawTetris38 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Tetris.drawTetris21
                   Tetris.drawTetris39) -}
9d60ad3ed89faac65b5aa52b1bb2e64c
  drawTetris39 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Tetris.drawTetris7
                   Tetris.drawTetris40) -}
c37fd7c6f7644c5ee65b9b6a0e3c6c81
  drawTetris4 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Tetris.drawTetris7
                   Tetris.drawTetris5) -}
42f2765651e61ffc664ffe6e717ee6a0
  drawTetris40 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Tetris.drawtextCircle
                   Tetris.drawTetris41) -}
7b26829d60691417d87dd104565f1cb1
  drawTetris41 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Tetris.drawtextSmooth
                   Tetris.drawTetris42) -}
4c2cab16a9409d9b01509f25830f9b32
  drawTetris42 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Tetris.drawRectanglBackGr
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture)) -}
1fa23e839a2c29102e1bf33055702530
  drawTetris43 ::
    Tetris.FigureType
    -> Tetris.Direction
    -> Tetris.Coord
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 3,
     Unfolding: (\ (ww :: Tetris.FigureType)[OneShot]
                   (ww1 :: Tetris.Direction)[OneShot]
                   (ww2 :: Tetris.Coord)[OneShot] ->
                 case Tetris.$wfigureToDraw
                        ww
                        ww1
                        ww2 of ww3 { (#,,,#) ww4 ww5 ww6 ww7 ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures
                   (GHC.Types.:
                      @ Graphics.Gloss.Internals.Data.Picture.Picture
                      (Tetris.drawBlock ww4)
                      (GHC.Types.:
                         @ Graphics.Gloss.Internals.Data.Picture.Picture
                         (Tetris.drawBlock ww5)
                         (GHC.Types.:
                            @ Graphics.Gloss.Internals.Data.Picture.Picture
                            (Tetris.drawBlock ww6)
                            (GHC.Types.:
                               @ Graphics.Gloss.Internals.Data.Picture.Picture
                               (Tetris.drawBlock ww7)
                               (GHC.Types.[]
                                  @ Graphics.Gloss.Internals.Data.Picture.Picture))))) }) -}
74702efdc048d36db3e0ac610e04111b
  drawTetris44 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Unfolding: (Tetris.drawTetris43
                   Tetris.T
                   Tetris.DUp
                   Tetris.drawFigure2) -}
a8779353a5c1d85d6511358be146dcf2
  drawTetris5 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Tetris.drawtextCircle
                   Tetris.drawTetris6) -}
192d017fefc716b34f8aa3707b1a91fb
  drawTetris6 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Tetris.drawtextSmooth
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture)) -}
95a18e918a993482a16003122ddcedf7
  drawTetris7 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m10,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Color
                   Graphics.Gloss.Data.Color.orange
                   Tetris.drawTetris8) -}
a019bab98b20eeda56ec659effe57624
  drawTetris8 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Polygon
                   Tetris.drawTetris9) -}
1ae8b3950e45c5af47de70a1b0cb7c5b
  drawTetris9 :: [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Tetris.drawTetris20
                   Tetris.drawTetris10) -}
060675b775459fb8f258cf0257021c11
  drawTextConCircle :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 4.0#) -}
067c9be306d12b9b122548f58ed160bb
  drawTextConSmooth :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# -18.0#) -}
135e8a98b33d9e65195132b15032aae5
  drawmenuCircle ::
    (GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
     GHC.Types.Float)
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U)>m10, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
                          GHC.Types.Float)) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 Graphics.Gloss.Internals.Data.Picture.Color
                   Graphics.Gloss.Data.Color.yellow
                   (Graphics.Gloss.Internals.Data.Picture.Polygon
                      (GHC.Types.:
                         @ Graphics.Gloss.Internals.Data.Picture.Point
                         (ww1, ww4)
                         (GHC.Types.:
                            @ Graphics.Gloss.Internals.Data.Picture.Point
                            (ww1, ww3)
                            (GHC.Types.:
                               @ Graphics.Gloss.Internals.Data.Picture.Point
                               (ww2, ww3)
                               (GHC.Types.:
                                  @ Graphics.Gloss.Internals.Data.Picture.Point
                                  (ww2, ww4)
                                  (GHC.Types.[]
                                     @ Graphics.Gloss.Internals.Data.Picture.Point)))))) }) -}
5a18cf2a080e9bf49116f316fcd41914
  drawmenuSmooth ::
    (GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
     GHC.Types.Float)
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U)>m10, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
                          GHC.Types.Float)) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 Graphics.Gloss.Internals.Data.Picture.Color
                   Graphics.Gloss.Data.Color.orange
                   (Graphics.Gloss.Internals.Data.Picture.Polygon
                      (GHC.Types.:
                         @ Graphics.Gloss.Internals.Data.Picture.Point
                         (ww1, ww4)
                         (GHC.Types.:
                            @ Graphics.Gloss.Internals.Data.Picture.Point
                            (ww1, ww3)
                            (GHC.Types.:
                               @ Graphics.Gloss.Internals.Data.Picture.Point
                               (ww2, ww3)
                               (GHC.Types.:
                                  @ Graphics.Gloss.Internals.Data.Picture.Point
                                  (ww2, ww4)
                                  (GHC.Types.[]
                                     @ Graphics.Gloss.Internals.Data.Picture.Point)))))) }) -}
8726e875db8a449031ad827575a370af
  drawtextCircle :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m11,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Translate
                   Tetris.drawtextCircle10
                   Tetris.drawtextCircle9
                   Tetris.drawtextCircle1) -}
d0db243b79c749d614b210de0bc024a0
  drawtextCircle1 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m13,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Scale
                   Tetris.blockSizeFloat
                   Tetris.blockSizeFloat
                   Tetris.drawtextCircle2) -}
5d8bf64381e0d490b0b0334f0a9de550
  drawtextCircle10 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# -27.0#) -}
66365e7ca6961bb6918d0bb13133a59a
  drawtextCircle2 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m14,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Pictures
                   Tetris.drawtextCircle3) -}
1a4219c40f6db19ed88b8511f289d7d2
  drawtextCircle3 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Tetris.drawtextCircle4
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture)) -}
1786c7db3c80960af7f2ba8ca8da1c81
  drawtextCircle4 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m11,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Translate
                   Tetris.thicknessTwo
                   Tetris.translateT
                   Tetris.drawtextCircle5) -}
83708f2bb37b6eda4d5ac34d44acff7b
  drawtextCircle5 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m13,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Scale
                   Tetris.scaleT
                   Tetris.scaleT
                   Tetris.drawtextCircle6) -}
ebaae6b274b771de17792884947909a1
  drawtextCircle6 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m10,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Color
                   Graphics.Gloss.Data.Color.red
                   Tetris.drawtextCircle7) -}
7e72acf009224d92fe53a0040c544110
  drawtextCircle7 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m8,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Text
                   Tetris.drawtextCircle8) -}
a7a31cc06b2f676a926dfb3192a5b5d9
  drawtextCircle8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Type"#) -}
90e63cb43adc89fcf023dbdb14ab102a
  drawtextCircle9 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 304.0#) -}
7089b895a46c34f3ade0e1dcb83415b4
  drawtextSmooth :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m11,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Translate
                   Tetris.drawtextSmooth10
                   Tetris.drawtextSmooth9
                   Tetris.drawtextSmooth1) -}
3e436833c369032b5c133fcf0e8b8716
  drawtextSmooth1 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m13,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Scale
                   Tetris.scaleTSmooth
                   Tetris.scaleTSmooth
                   Tetris.drawtextSmooth2) -}
0e78616c7ff751f3610a97a7612e0c2d
  drawtextSmooth10 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 75.0#) -}
7291540e524186753a343272776bb502
  drawtextSmooth2 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m14,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Pictures
                   Tetris.drawtextSmooth3) -}
fd9d9fd3601cbee7b074d5d9e73dac6d
  drawtextSmooth3 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Tetris.drawtextSmooth4
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture)) -}
aa499b5ce4bdb4d909bfab59c6f67669
  drawtextSmooth4 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m11,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Translate
                   Tetris.thicknessTwo
                   Tetris.translateT
                   Tetris.drawtextSmooth5) -}
916f4019f6d86ef04532ee7594914f13
  drawtextSmooth5 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m13,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Scale
                   Tetris.scaleT
                   Tetris.scaleT
                   Tetris.drawtextSmooth6) -}
db6f69687b2ee707749771fe887e8882
  drawtextSmooth6 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m10,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Color
                   Graphics.Gloss.Data.Color.red
                   Tetris.drawtextSmooth7) -}
2021a16989575df155687ad3dbd48d56
  drawtextSmooth7 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m8,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Text
                   Tetris.drawtextSmooth8) -}
c873629e13fb806f2a90c44944268b53
  drawtextSmooth8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Smooth"#) -}
8829e8e7ceba809c50c530732252e52a
  drawtextSmooth9 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 282.0#) -}
4e7bc6c4b9340f31675d96087fe93866
  dropit :: Tetris.GameState -> GHC.Types.Int -> Tetris.GameState
  {- Arity: 2,
     Strictness: <S(SSLLLSL),1*U(U,U,U,U(U),U,U,U)><L,1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (u :: Tetris.GameState) (ptr :: GHC.Types.Int) ->
                 case u of wild { Tetris.GameState ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 case ds5 of wild1 {
                   Tetris.TetrisStepped -> Tetris.dropitStepped wild ptr
                   Tetris.TetrisSmooth -> Tetris.dropitSmooth wild ptr } }) -}
776dded84f8282fe48a5c8403090f6b5
  dropitSmooth ::
    Tetris.GameState -> GHC.Types.Int -> Tetris.GameState
  {- Arity: 2,
     Strictness: <S(SSLLLLL),U(U,U,U,1*U(U),U,U,U)><L,1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Tetris.GameState) (w4 :: GHC.Types.Int) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case Tetris.$wdropitSmooth
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        w4 of ww8 { (#,,,,,,#) ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Tetris.GameState ww9 ww10 ww11 ww12 ww13 ww14 ww15 } }) -}
773cee50e082dead3e1e23709f2d5399
  dropitStepped ::
    Tetris.GameState -> GHC.Types.Int -> Tetris.GameState
  {- Arity: 2,
     Strictness: <S(SSLLLLL),U(U,U,U,1*U(U),U,U,U)><L,1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Tetris.GameState) (w4 :: GHC.Types.Int) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case Tetris.$wdropitStepped
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        w4 of ww8 { (#,,,,,,#) ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Tetris.GameState ww9 ww10 ww11 ww12 ww13 ww14 ww15 } }) -}
3f918d3ea4af3807cacc1644ce004a13
  extrSpeed :: (Tetris.Speed, Tetris.Time) -> Tetris.Speed
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Tetris.Speed, Tetris.Time)) ->
                 case ds of wild { (,) sp ds1 -> sp }) -}
3ad141513062289ed0511abe94ddc93b
  extrTime :: (Tetris.Speed, Tetris.Time) -> Tetris.Time
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Tetris.Speed, Tetris.Time)) ->
                 case ds of wild { (,) ds1 ti -> ti }) -}
53760b675ed8ff7b2c6fde8399d75fb0
  fieldHeight :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 40.0#) -}
52a61cf856214e5c51e6cf1a23d9db6c
  fieldWidth :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 150.0#) -}
69969020d72a0116c1681026488036f3
  figure :: Tetris.GameState -> [Tetris.Figure]
  RecSel Left Tetris.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.GameState) ->
                 case ds of wild { Tetris.GameState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds2 }) -}
7d7f6e717fa27d0515b2de14b665c804
  figureToDraw :: Tetris.Figure -> Tetris.BlockedFigure
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,U(U(U),U(U),U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.Figure) ->
                 case w of ww { Tetris.Figure ww1 ww2 ww3 ->
                 case Tetris.$wfigureToDraw
                        ww1
                        ww2
                        ww3 of ww4 { (#,,,#) ww5 ww6 ww7 ww8 ->
                 (ww5, ww6, ww7, ww8) } }) -}
62bb385a7ab4543a7134e2b6c94ca6ad
  figureToDrawI :: Tetris.Figure -> Tetris.BlockedFigure
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U,U(U(U),U(U),U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.Figure) ->
                 case w of ww { Tetris.Figure ww1 ww2 ww3 ->
                 case Tetris.$wfigureToDrawI
                        ww2
                        ww3 of ww4 { (#,,,#) ww5 ww6 ww7 ww8 ->
                 (ww5, ww6, ww7, ww8) } }) -}
5e86d2fb6140cb3d54629ffddb96f583
  figureToDrawJ :: Tetris.Figure -> Tetris.BlockedFigure
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U,U(U(U),U(U),U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.Figure) ->
                 case w of ww { Tetris.Figure ww1 ww2 ww3 ->
                 case Tetris.$wfigureToDrawJ
                        ww2
                        ww3 of ww4 { (#,,,#) ww5 ww6 ww7 ww8 ->
                 (ww5, ww6, ww7, ww8) } }) -}
c96fff9aae4851da27987922270f3a4b
  figureToDrawL :: Tetris.Figure -> Tetris.BlockedFigure
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U,U(U(U),U(U),U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.Figure) ->
                 case w of ww { Tetris.Figure ww1 ww2 ww3 ->
                 case Tetris.$wfigureToDrawL
                        ww2
                        ww3 of ww4 { (#,,,#) ww5 ww6 ww7 ww8 ->
                 (ww5, ww6, ww7, ww8) } }) -}
8bebc7a1c6c9768ce6f9ca413f455e43
  figureToDrawO :: Tetris.Figure -> Tetris.BlockedFigure
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(A,A,U(U(U),U(U),U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.Figure) ->
                 case w of ww { Tetris.Figure ww1 ww2 ww3 ->
                 (ww3,
                  case ww3 of wild { Tetris.Coord ds ds1 ds2 ->
                  Tetris.Coord
                    (case ds of wild1 { GHC.Types.I# x1 ->
                     GHC.Types.I# (GHC.Prim.+# x1 30#) })
                    ds1
                    ds2 },
                  case ww3 of wild { Tetris.Coord ds ds1 ds2 ->
                  Tetris.Coord
                    ds
                    (case ds1 of wild1 { GHC.Types.I# x1 ->
                     GHC.Types.I# (GHC.Prim.-# x1 30#) })
                    ds2 },
                  case ww3 of wild { Tetris.Coord ds ds1 ds2 ->
                  Tetris.Coord
                    (case ds of wild1 { GHC.Types.I# x1 ->
                     GHC.Types.I# (GHC.Prim.+# x1 30#) })
                    (case ds1 of wild1 { GHC.Types.I# x1 ->
                     GHC.Types.I# (GHC.Prim.-# x1 30#) })
                    ds2 }) }) -}
b0bc5c9efb80ddc4b5521e299538fcab
  figureToDrawS :: Tetris.Figure -> Tetris.BlockedFigure
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U,U(U(U),U(U),U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.Figure) ->
                 case w of ww { Tetris.Figure ww1 ww2 ww3 ->
                 case Tetris.$wfigureToDrawS
                        ww2
                        ww3 of ww4 { (#,,,#) ww5 ww6 ww7 ww8 ->
                 (ww5, ww6, ww7, ww8) } }) -}
420fbb40859b64ec5eab1aa90a53d537
  figureToDrawT :: Tetris.Figure -> Tetris.BlockedFigure
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U,U(U(U),U(U),U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.Figure) ->
                 case w of ww { Tetris.Figure ww1 ww2 ww3 ->
                 case Tetris.$wfigureToDrawT
                        ww2
                        ww3 of ww4 { (#,,,#) ww5 ww6 ww7 ww8 ->
                 (ww5, ww6, ww7, ww8) } }) -}
7c34646e01547f315bf8c128467d843b
  figureToDrawZ :: Tetris.Figure -> Tetris.BlockedFigure
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U,U(U(U),U(U),U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.Figure) ->
                 case w of ww { Tetris.Figure ww1 ww2 ww3 ->
                 case Tetris.$wfigureToDrawZ
                        ww2
                        ww3 of ww4 { (#,,,#) ww5 ww6 ww7 ww8 ->
                 (ww5, ww6, ww7, ww8) } }) -}
2f0b2294ed06710a03bf83a28544e731
  fromCoord :: Tetris.Coord -> Tetris.Coord1
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.Coord) ->
                 case ds of wild { Tetris.Coord ds1 ds2 ds3 -> (ds1, ds2, ds3) }) -}
becc675c626c95f5857c468173ab4584
  fromGS :: Tetris.GameState -> Tetris.Gamestate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.GameState) ->
                 case ds of wild { Tetris.GameState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 (ds1, ds2, ds3, ds4, ds5, ds6, ds7) }) -}
199f43110fc244c8c2e9a25345bbe36c
  genEmptyBoard :: Tetris.Board
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                (GHC.Types.[] @ Tetris.Coord) -}
1fa38049c3bffadee2416b3eb7fec5aa
  genFigure :: GHC.Types.Int -> Tetris.Figure
  {- Arity: 1, Strictness: <S(S),1*U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case ww1 of wild {
                   DEFAULT
                   -> Tetris.Figure
                        Tetris.Z
                        Tetris.DUp
                        (Tetris.Coord
                           Tetris.drawFigure3
                           Tetris.glob_fps
                           (GHC.Types.I# wild))
                   0#
                   -> Tetris.Figure
                        Tetris.O
                        Tetris.DUp
                        (Tetris.Coord Tetris.drawFigure3 Tetris.glob_fps (GHC.Types.I# 0#))
                   1#
                   -> Tetris.Figure
                        Tetris.I
                        Tetris.DUp
                        (Tetris.Coord Tetris.drawFigure3 Tetris.glob_fps (GHC.Types.I# 1#))
                   2#
                   -> Tetris.Figure
                        Tetris.T
                        Tetris.DUp
                        (Tetris.Coord Tetris.drawFigure3 Tetris.glob_fps (GHC.Types.I# 2#))
                   3#
                   -> Tetris.Figure
                        Tetris.J
                        Tetris.DUp
                        (Tetris.Coord Tetris.drawFigure3 Tetris.glob_fps (GHC.Types.I# 3#))
                   4#
                   -> Tetris.Figure
                        Tetris.L
                        Tetris.DUp
                        (Tetris.Coord Tetris.drawFigure3 Tetris.glob_fps (GHC.Types.I# 4#))
                   5#
                   -> Tetris.Figure
                        Tetris.S
                        Tetris.DUp
                        (Tetris.Coord
                           Tetris.drawFigure3
                           Tetris.glob_fps
                           (GHC.Types.I# 5#)) } }) -}
e6d2c996dcd581a54a5def91e9d5be35
  genNewUniverse ::
    Tetris.GameState -> GHC.Types.Float -> Tetris.GameState
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(A,1*U,A,A,U,U,A)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (u :: Tetris.GameState) (fl :: GHC.Types.Float) ->
                 case u of wild { Tetris.GameState ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 Tetris.GameState
                   (GHC.Types.[] @ Tetris.Coord)
                   (case ds1 of wild1 {
                      [] -> GHC.Types.[] @ Tetris.Figure : ds7 fs -> fs })
                   (fl, Tetris.chZ1)
                   Tetris.chMoving1
                   ds4
                   ds5
                   fl }) -}
034a3da2a49bda919465c52e7367ecd2
  genRow :: GHC.Types.Int -> Tetris.Row
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Tetris.$wgenRow ww1 }) -}
81e6bc0ef7f8f44933731e138b584652
  genRows :: GHC.Types.Int -> GHC.Types.Int -> [Tetris.Row]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S(S),1*U(1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w4 :: GHC.Types.Int) ->
                 case w4 of ww { GHC.Types.I# ww1 -> Tetris.$wgenRows w ww1 }) -}
e6ad89594f1196470f30117701717fe9
  genTetris ::
    Tetris.GameState -> GHC.Types.Float -> Tetris.GameState
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(A,1*U,A,A,U,1*U,A)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (u :: Tetris.GameState) (df :: GHC.Types.Float) ->
                 case u of wild { Tetris.GameState ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 Tetris.GameState
                   (GHC.Types.[] @ Tetris.Coord)
                   (case ds1 of wild1 {
                      [] -> GHC.Types.[] @ Tetris.Figure : ds7 fs -> fs })
                   (df, Tetris.chZ1)
                   Tetris.chMoving1
                   ds4
                   (case ds5 of wild1 {
                      Tetris.TetrisStepped -> Tetris.TetrisSmooth
                      Tetris.TetrisSmooth -> Tetris.TetrisStepped })
                   df }) -}
1c77d86ed8f298b65678525fe4c558ad
  genUniverse :: System.Random.StdGen -> Tetris.GameState
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (g :: System.Random.StdGen) ->
                 Tetris.GameState
                   (GHC.Types.[] @ Tetris.Coord)
                   (Tetris.initFigures g)
                   Tetris.genUniverse1
                   Tetris.chMoving1
                   Tetris.TetrisRect
                   Tetris.TetrisStepped
                   Tetris.inintTactStepped) -}
6292e44a7998361398f211cf5c5faba6
  genUniverse1 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs,
     Unfolding: ((Tetris.inintTactStepped, Tetris.transCircleBack)) -}
a95731ed9bdd4216922b69f92d240d74
  getc :: Tetris.Figure -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS(LSL)),1*U(A,A,1*U(A,1*U(U),A))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.Figure) ->
                 case ds of wild { Tetris.Figure ds1 ds2 u ->
                 case u of wild1 { Tetris.Coord ds3 ds4 ds5 -> ds4 } }) -}
7f2d32a98911bcbddd24b4fad4c4d813
  getf :: [Tetris.Figure] -> Tetris.Figure
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: [Tetris.Figure]) ->
                 case ds of wild { [] -> Tetris.drawFigure1 : f ds1 -> f }) -}
054ce8a89faa32fd743908c116ac69f3
  getrange :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Tetris.chMoving1, Tetris.getrange1)) -}
e785033b02824bd030039ff994ed534d
  getrange1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 6#) -}
c1da6669f33081d3f2466330a338cf6f
  glob_fps :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 60#) -}
ef9c306ac16d5eb56c6cd55d585f4284
  handleTetris ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Tetris.GameState -> Tetris.GameState
  {- Arity: 2, Strictness: <S,1*U><S,1*U(U,U,U(U(U),U),U(U),U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (w4 :: Tetris.GameState) ->
                 case w4 of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case w of wild {
                   DEFAULT -> Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7
                   Graphics.Gloss.Internals.Interface.Event.EventKey ds ds1 ds2 ds3
                   -> case ds of wild1 {
                        Graphics.Gloss.Internals.Interface.Backend.Types.Char ds4
                        -> case ds4 of wild2 { GHC.Types.C# ds5 ->
                           case ds5 of ds6 {
                             DEFAULT -> Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7
                             'j'#
                             -> case ds1 of wild3 {
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Down
                                  -> case Tetris.$wmoveLeft
                                            ww1
                                            ww2
                                            ww3
                                            ww4
                                            ww5
                                            ww6
                                            ww7 of ww8 { (#,,,,,,#) ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                                     Tetris.GameState ww9 ww10 ww11 ww12 ww13 ww14 ww15 }
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Up
                                  -> Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 }
                             'k'#
                             -> case ds1 of wild3 {
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Down
                                  -> case ww5 of wild4 {
                                       Tetris.TetrisRect
                                       -> case ww6 of wild5 {
                                            Tetris.TetrisStepped
                                            -> Tetris.GameState
                                                 ww1
                                                 (GHC.Types.:
                                                    @ Tetris.Figure
                                                    (case ww2 of wild6 {
                                                       []
                                                       -> Tetris.Figure
                                                            Tetris.T
                                                            Tetris.DRight
                                                            Tetris.drawFigure2
                                                       : f ds7
                                                       -> case f of wild7 { Tetris.Figure t ds8 c ->
                                                          case ds8 of wild8 {
                                                            Tetris.DUp
                                                            -> Tetris.Figure t Tetris.DRight c
                                                            Tetris.DDown
                                                            -> Tetris.Figure t Tetris.DLeft c
                                                            Tetris.DLeft
                                                            -> Tetris.Figure t Tetris.DUp c
                                                            Tetris.DRight
                                                            -> Tetris.Figure t Tetris.DDown c } } })
                                                    (case ww2 of wild6 {
                                                       [] -> GHC.Types.[] @ Tetris.Figure
                                                       : ds7 fs -> fs }))
                                                 ww3
                                                 ww4
                                                 Tetris.TetrisRect
                                                 Tetris.TetrisStepped
                                                 ww7
                                            Tetris.TetrisSmooth
                                            -> Tetris.GameState
                                                 ww1
                                                 (GHC.Types.:
                                                    @ Tetris.Figure
                                                    (case ww2 of wild6 {
                                                       []
                                                       -> Tetris.Figure
                                                            Tetris.T
                                                            Tetris.DRight
                                                            Tetris.drawFigure2
                                                       : f ds7
                                                       -> case f of wild7 { Tetris.Figure t ds8 c ->
                                                          case ds8 of wild8 {
                                                            Tetris.DUp
                                                            -> Tetris.Figure t Tetris.DRight c
                                                            Tetris.DDown
                                                            -> Tetris.Figure t Tetris.DLeft c
                                                            Tetris.DLeft
                                                            -> Tetris.Figure t Tetris.DUp c
                                                            Tetris.DRight
                                                            -> Tetris.Figure t Tetris.DDown c } } })
                                                    (case ww2 of wild6 {
                                                       [] -> GHC.Types.[] @ Tetris.Figure
                                                       : ds7 fs -> fs }))
                                                 ww3
                                                 ww4
                                                 Tetris.TetrisRect
                                                 Tetris.TetrisSmooth
                                                 ww7 }
                                       Tetris.TetrisRound
                                       -> Tetris.GameState
                                            ww1
                                            (GHC.Types.:
                                               @ Tetris.Figure
                                               (case ww2 of wild5 {
                                                  []
                                                  -> Tetris.Figure
                                                       Tetris.T
                                                       Tetris.DRight
                                                       Tetris.drawFigure2
                                                  : f ds7
                                                  -> case f of wild6 { Tetris.Figure t ds8 c ->
                                                     case ds8 of wild7 {
                                                       Tetris.DUp -> Tetris.Figure t Tetris.DRight c
                                                       Tetris.DDown
                                                       -> Tetris.Figure t Tetris.DLeft c
                                                       Tetris.DLeft -> Tetris.Figure t Tetris.DUp c
                                                       Tetris.DRight
                                                       -> Tetris.Figure t Tetris.DDown c } } })
                                               (case ww2 of wild5 {
                                                  [] -> GHC.Types.[] @ Tetris.Figure
                                                  : ds7 fs -> fs }))
                                            ww3
                                            ww4
                                            Tetris.TetrisRound
                                            ww6
                                            ww7 }
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Up
                                  -> Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 }
                             'l'#
                             -> case ds1 of wild3 {
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Down
                                  -> case Tetris.$wmoveRight
                                            ww1
                                            ww2
                                            ww3
                                            ww4
                                            ww5
                                            ww6
                                            ww7 of ww8 { (#,,,,,,#) ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                                     Tetris.GameState ww9 ww10 ww11 ww12 ww13 ww14 ww15 }
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Up
                                  -> Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 }
                             'p'#
                             -> case ds1 of wild3 {
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Down
                                  -> Tetris.GameState
                                       ww1
                                       ww2
                                       (case ww3 of wild4 { (,) sp ti ->
                                        (GHC.Float.negateFloat sp, ti) })
                                       ww4
                                       ww5
                                       ww6
                                       ww7
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Up
                                  -> Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 } } }
                        Graphics.Gloss.Internals.Interface.Backend.Types.SpecialKey ds4
                        -> case ds4 of wild2 {
                             DEFAULT -> Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7
                             Graphics.Gloss.Internals.Interface.Backend.Types.KeySpace
                             -> case ds1 of wild3 {
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Down
                                  -> let {
                                       ptr :: GHC.Types.Int
                                       = case ww2 of wild4 {
                                           [] -> GHC.Types.I# 540#
                                           : f ds5
                                           -> case f of wild5 { Tetris.Figure ds6 ds7 u ->
                                              case u of wild6 { Tetris.Coord ds8 ds9 ds10 ->
                                              case ds9 of wild7 { GHC.Types.I# y1 ->
                                              GHC.Types.I# (GHC.Prim.-# 600# y1) } } } }
                                     } in
                                     case ww6 of wild4 {
                                       Tetris.TetrisStepped
                                       -> case Tetris.$wdropitStepped
                                                 ww1
                                                 ww2
                                                 ww3
                                                 ww4
                                                 ww5
                                                 Tetris.TetrisStepped
                                                 ww7
                                                 ptr of ww8 { (#,,,,,,#) ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                                          Tetris.GameState ww9 ww10 ww11 ww12 ww13 ww14 ww15 }
                                       Tetris.TetrisSmooth
                                       -> case Tetris.$wdropitSmooth
                                                 ww1
                                                 ww2
                                                 ww3
                                                 ww4
                                                 ww5
                                                 Tetris.TetrisSmooth
                                                 ww7
                                                 ptr of ww8 { (#,,,,,,#) ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                                          Tetris.GameState ww9 ww10 ww11 ww12 ww13 ww14 ww15 } }
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Up
                                  -> Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 } }
                        Graphics.Gloss.Internals.Interface.Backend.Types.MouseButton ds4
                        -> case ds4 of wild2 {
                             DEFAULT -> Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7
                             Graphics.Gloss.Internals.Interface.Backend.Types.LeftButton
                             -> case ds1 of wild3 {
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Down
                                  -> Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Up
                                  -> case ds3 of ww8 { (,) ww9 ww10 ->
                                     case ww9 of ww11 { GHC.Types.F# ww12 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.gtFloat# ww12 34.0#) of wild4 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.gtFloat# ww12 101.0#) of wild5 {
                                            GHC.Types.False
                                            -> Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.ltFloat# ww12 148.0#) of wild6 {
                                                 GHC.Types.False
                                                 -> Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7
                                                 GHC.Types.True
                                                 -> case ww10 of wild7 { GHC.Types.F# x1 ->
                                                    case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.gtFloat# x1 250.0#) of wild8 {
                                                      GHC.Types.False
                                                      -> Tetris.GameState
                                                           ww1
                                                           ww2
                                                           ww3
                                                           ww4
                                                           ww5
                                                           ww6
                                                           ww7
                                                      GHC.Types.True
                                                      -> case GHC.Prim.tagToEnum#
                                                                @ GHC.Types.Bool
                                                                (GHC.Prim.ltFloat#
                                                                   x1
                                                                   290.0#) of wild9 {
                                                           GHC.Types.False
                                                           -> Tetris.GameState
                                                                ww1
                                                                ww2
                                                                ww3
                                                                ww4
                                                                ww5
                                                                ww6
                                                                ww7
                                                           GHC.Types.True
                                                           -> case ww6 of wild10 {
                                                                Tetris.TetrisStepped
                                                                -> Tetris.GameState
                                                                     (GHC.Types.[] @ Tetris.Coord)
                                                                     (case ww2 of wild11 {
                                                                        []
                                                                        -> GHC.Types.[]
                                                                             @ Tetris.Figure
                                                                        : ds5 fs -> fs })
                                                                     (Tetris.inintTactSmooth,
                                                                      Tetris.transCircleBack)
                                                                     Tetris.chMoving1
                                                                     ww5
                                                                     Tetris.TetrisSmooth
                                                                     Tetris.inintTactSmooth
                                                                Tetris.TetrisSmooth
                                                                -> Tetris.GameState
                                                                     (GHC.Types.[] @ Tetris.Coord)
                                                                     (case ww2 of wild11 {
                                                                        []
                                                                        -> GHC.Types.[]
                                                                             @ Tetris.Figure
                                                                        : ds5 fs -> fs })
                                                                     (Tetris.inintTactStepped,
                                                                      Tetris.transCircleBack)
                                                                     Tetris.chMoving1
                                                                     ww5
                                                                     Tetris.TetrisSmooth
                                                                     Tetris.inintTactStepped } } } } } }
                                       GHC.Types.True
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.ltFloat# ww12 100.0#) of wild5 {
                                            GHC.Types.False
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.gtFloat# ww12 101.0#) of wild6 {
                                                 GHC.Types.False
                                                 -> Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7
                                                 GHC.Types.True
                                                 -> case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.ltFloat#
                                                              ww12
                                                              148.0#) of wild7 {
                                                      GHC.Types.False
                                                      -> Tetris.GameState
                                                           ww1
                                                           ww2
                                                           ww3
                                                           ww4
                                                           ww5
                                                           ww6
                                                           ww7
                                                      GHC.Types.True
                                                      -> case ww10 of wild8 { GHC.Types.F# x1 ->
                                                         case GHC.Prim.tagToEnum#
                                                                @ GHC.Types.Bool
                                                                (GHC.Prim.gtFloat#
                                                                   x1
                                                                   250.0#) of wild9 {
                                                           GHC.Types.False
                                                           -> Tetris.GameState
                                                                ww1
                                                                ww2
                                                                ww3
                                                                ww4
                                                                ww5
                                                                ww6
                                                                ww7
                                                           GHC.Types.True
                                                           -> case GHC.Prim.tagToEnum#
                                                                     @ GHC.Types.Bool
                                                                     (GHC.Prim.ltFloat#
                                                                        x1
                                                                        290.0#) of wild10 {
                                                                GHC.Types.False
                                                                -> Tetris.GameState
                                                                     ww1
                                                                     ww2
                                                                     ww3
                                                                     ww4
                                                                     ww5
                                                                     ww6
                                                                     ww7
                                                                GHC.Types.True
                                                                -> case ww6 of wild11 {
                                                                     Tetris.TetrisStepped
                                                                     -> Tetris.GameState
                                                                          (GHC.Types.[]
                                                                             @ Tetris.Coord)
                                                                          (case ww2 of wild12 {
                                                                             []
                                                                             -> GHC.Types.[]
                                                                                  @ Tetris.Figure
                                                                             : ds5 fs -> fs })
                                                                          (Tetris.inintTactSmooth,
                                                                           Tetris.transCircleBack)
                                                                          Tetris.chMoving1
                                                                          ww5
                                                                          Tetris.TetrisSmooth
                                                                          Tetris.inintTactSmooth
                                                                     Tetris.TetrisSmooth
                                                                     -> Tetris.GameState
                                                                          (GHC.Types.[]
                                                                             @ Tetris.Coord)
                                                                          (case ww2 of wild12 {
                                                                             []
                                                                             -> GHC.Types.[]
                                                                                  @ Tetris.Figure
                                                                             : ds5 fs -> fs })
                                                                          (Tetris.inintTactStepped,
                                                                           Tetris.transCircleBack)
                                                                          Tetris.chMoving1
                                                                          ww5
                                                                          Tetris.TetrisSmooth
                                                                          Tetris.inintTactStepped } } } } } }
                                            GHC.Types.True
                                            -> case ww10 of wild6 { GHC.Types.F# x1 ->
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.gtFloat# x1 250.0#) of wild7 {
                                                 GHC.Types.False
                                                 -> case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.gtFloat#
                                                              ww12
                                                              101.0#) of wild8 {
                                                      GHC.Types.False
                                                      -> Tetris.GameState
                                                           ww1
                                                           ww2
                                                           ww3
                                                           ww4
                                                           ww5
                                                           ww6
                                                           ww7
                                                      GHC.Types.True
                                                      -> case GHC.Prim.tagToEnum#
                                                                @ GHC.Types.Bool
                                                                (GHC.Prim.ltFloat#
                                                                   ww12
                                                                   148.0#) of wild9 {
                                                           GHC.Types.False
                                                           -> Tetris.GameState
                                                                ww1
                                                                ww2
                                                                ww3
                                                                ww4
                                                                ww5
                                                                ww6
                                                                ww7
                                                           GHC.Types.True
                                                           -> case GHC.Prim.tagToEnum#
                                                                     @ GHC.Types.Bool
                                                                     (GHC.Prim.gtFloat#
                                                                        x1
                                                                        250.0#) of wild10 {
                                                                GHC.Types.False
                                                                -> Tetris.GameState
                                                                     ww1
                                                                     ww2
                                                                     ww3
                                                                     ww4
                                                                     ww5
                                                                     ww6
                                                                     ww7
                                                                GHC.Types.True
                                                                -> case GHC.Prim.tagToEnum#
                                                                          @ GHC.Types.Bool
                                                                          (GHC.Prim.ltFloat#
                                                                             x1
                                                                             290.0#) of wild11 {
                                                                     GHC.Types.False
                                                                     -> Tetris.GameState
                                                                          ww1
                                                                          ww2
                                                                          ww3
                                                                          ww4
                                                                          ww5
                                                                          ww6
                                                                          ww7
                                                                     GHC.Types.True
                                                                     -> case ww6 of wild12 {
                                                                          Tetris.TetrisStepped
                                                                          -> Tetris.GameState
                                                                               (GHC.Types.[]
                                                                                  @ Tetris.Coord)
                                                                               (case ww2 of wild13 {
                                                                                  []
                                                                                  -> GHC.Types.[]
                                                                                       @ Tetris.Figure
                                                                                  : ds5 fs -> fs })
                                                                               (Tetris.inintTactSmooth,
                                                                                Tetris.transCircleBack)
                                                                               Tetris.chMoving1
                                                                               ww5
                                                                               Tetris.TetrisSmooth
                                                                               Tetris.inintTactSmooth
                                                                          Tetris.TetrisSmooth
                                                                          -> Tetris.GameState
                                                                               (GHC.Types.[]
                                                                                  @ Tetris.Coord)
                                                                               (case ww2 of wild13 {
                                                                                  []
                                                                                  -> GHC.Types.[]
                                                                                       @ Tetris.Figure
                                                                                  : ds5 fs -> fs })
                                                                               (Tetris.inintTactStepped,
                                                                                Tetris.transCircleBack)
                                                                               Tetris.chMoving1
                                                                               ww5
                                                                               Tetris.TetrisSmooth
                                                                               Tetris.inintTactStepped } } } } }
                                                 GHC.Types.True
                                                 -> case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.ltFloat# x1 290.0#) of wild8 {
                                                      GHC.Types.False
                                                      -> case GHC.Prim.tagToEnum#
                                                                @ GHC.Types.Bool
                                                                (GHC.Prim.gtFloat#
                                                                   ww12
                                                                   101.0#) of wild9 {
                                                           GHC.Types.False
                                                           -> Tetris.GameState
                                                                ww1
                                                                ww2
                                                                ww3
                                                                ww4
                                                                ww5
                                                                ww6
                                                                ww7
                                                           GHC.Types.True
                                                           -> case GHC.Prim.tagToEnum#
                                                                     @ GHC.Types.Bool
                                                                     (GHC.Prim.ltFloat#
                                                                        ww12
                                                                        148.0#) of wild10 {
                                                                GHC.Types.False
                                                                -> Tetris.GameState
                                                                     ww1
                                                                     ww2
                                                                     ww3
                                                                     ww4
                                                                     ww5
                                                                     ww6
                                                                     ww7
                                                                GHC.Types.True
                                                                -> case GHC.Prim.tagToEnum#
                                                                          @ GHC.Types.Bool
                                                                          (GHC.Prim.gtFloat#
                                                                             x1
                                                                             250.0#) of wild11 {
                                                                     GHC.Types.False
                                                                     -> Tetris.GameState
                                                                          ww1
                                                                          ww2
                                                                          ww3
                                                                          ww4
                                                                          ww5
                                                                          ww6
                                                                          ww7
                                                                     GHC.Types.True
                                                                     -> case GHC.Prim.tagToEnum#
                                                                               @ GHC.Types.Bool
                                                                               (GHC.Prim.ltFloat#
                                                                                  x1
                                                                                  290.0#) of wild12 {
                                                                          GHC.Types.False
                                                                          -> Tetris.GameState
                                                                               ww1
                                                                               ww2
                                                                               ww3
                                                                               ww4
                                                                               ww5
                                                                               ww6
                                                                               ww7
                                                                          GHC.Types.True
                                                                          -> case ww6 of wild13 {
                                                                               Tetris.TetrisStepped
                                                                               -> Tetris.GameState
                                                                                    (GHC.Types.[]
                                                                                       @ Tetris.Coord)
                                                                                    (case ww2 of wild14 {
                                                                                       []
                                                                                       -> GHC.Types.[]
                                                                                            @ Tetris.Figure
                                                                                       : ds5 fs
                                                                                       -> fs })
                                                                                    (Tetris.inintTactSmooth,
                                                                                     Tetris.transCircleBack)
                                                                                    Tetris.chMoving1
                                                                                    ww5
                                                                                    Tetris.TetrisSmooth
                                                                                    Tetris.inintTactSmooth
                                                                               Tetris.TetrisSmooth
                                                                               -> Tetris.GameState
                                                                                    (GHC.Types.[]
                                                                                       @ Tetris.Coord)
                                                                                    (case ww2 of wild14 {
                                                                                       []
                                                                                       -> GHC.Types.[]
                                                                                            @ Tetris.Figure
                                                                                       : ds5 fs
                                                                                       -> fs })
                                                                                    (Tetris.inintTactStepped,
                                                                                     Tetris.transCircleBack)
                                                                                    Tetris.chMoving1
                                                                                    ww5
                                                                                    Tetris.TetrisSmooth
                                                                                    Tetris.inintTactStepped } } } } }
                                                      GHC.Types.True
                                                      -> Tetris.GameState
                                                           ww1
                                                           ww2
                                                           ww3
                                                           ww4
                                                           (case ww5 of wild9 {
                                                              Tetris.TetrisRect
                                                              -> Tetris.TetrisRound
                                                              Tetris.TetrisRound
                                                              -> Tetris.TetrisRect })
                                                           ww6
                                                           ww7 } } } } } } } } } } } }) -}
8ca88521d18e2999036c9149a9e0697e
  handleTetris1 :: Tetris.Figure
  {- Unfolding: (Tetris.Figure
                   Tetris.T
                   Tetris.DUp
                   Tetris.handleTetris2) -}
19f639b80df0b8cb45fa4147f5eb9fb2
  handleTetris2 :: Tetris.Coord
  {- Unfolding: (Tetris.Coord
                   Tetris.handleTetris3
                   Tetris.glob_fps
                   Tetris.chMoving1) -}
096dd6a6bf08cb7e18c3b8cc1451e486
  handleTetris3 :: GHC.Types.Int
  {- Unfolding: (case Tetris.drawFigure3 of wild { GHC.Types.I# x1 ->
                 GHC.Types.I# (GHC.Prim.+# x1 30#) }) -}
29545b4e68d97b70dc6c33574d73a3b2
  handleTetris4 :: Tetris.Figure
  {- Unfolding: (Tetris.Figure
                   Tetris.T
                   Tetris.DUp
                   Tetris.handleTetris5) -}
8c53f01e6e13de12dba94dabc349dd3a
  handleTetris5 :: Tetris.Coord
  {- Unfolding: (Tetris.Coord
                   Tetris.handleTetris6
                   Tetris.glob_fps
                   Tetris.chMoving1) -}
087d1f1e514b254dbd70c2ab27976228
  handleTetris6 :: GHC.Types.Int
  {- Unfolding: (case Tetris.drawFigure3 of wild { GHC.Types.I# x1 ->
                 GHC.Types.I# (GHC.Prim.-# x1 30#) }) -}
8381f3cc4e174e1ab55128269b05dd43
  inintTactSmooth :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# 1.0e-2#) -}
ffe6a0657c45fe8732d613a41136d41c
  inintTactStepped :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.7#) -}
8f07316ced2e8c2fd2051ba17cb3b423
  initFigures :: System.Random.StdGen -> [Tetris.Figure]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (g :: System.Random.StdGen) ->
                 Tetris.initFigures_go g) -}
5ace535b83d900ea639fa31752e777da
  initFigures_go :: System.Random.StdGen -> [Tetris.Figure]
  {- Arity: 1, Strictness: <L,U> -}
82f53f7f2ce8ba2e935aa4f021083d8e
  init_tact :: Tetris.Time
  {- Strictness: m, Unfolding: (Tetris.inintTactStepped) -}
cd1c42792d51c7a06a6ac9dfae011fcc
  isFullRow :: [Tetris.Coord] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (r :: [Tetris.Coord]) ->
                 case GHC.List.$wlenAcc @ Tetris.Coord r 0# of ww2 { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# ww2 10#) }) -}
21c0d040271d695397ca6c428cc7347f
  isGameOver :: Tetris.GameState -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(SSLLLSL),1*U(U,1*U,A,A,A,1*U,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.GameState) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Tetris.$wisGameOver ww1 ww2 ww6 }) -}
10bd59ca4f2c2942ab3e68778d48cc7e
  lowerRows :: Tetris.Board -> GHC.Types.Int -> Tetris.Board
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (brd :: Tetris.Board) (scope :: GHC.Types.Int) ->
                 GHC.Base.build
                   @ Tetris.Coord
                   (\ @ b (c :: Tetris.Coord -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ Tetris.Coord
                      @ b
                      (GHC.List.filterFB
                         @ Tetris.Coord
                         @ b
                         c
                         (\ (c1 :: Tetris.Coord) ->
                          case c1 of wild { Tetris.Coord ds ds1 ds2 ->
                          GHC.Classes.gtInt ds1 scope }))
                      n
                      brd)) -}
f26571e7f8735da100449b6bc599686d
  magframe ::
    GHC.Types.Int
    -> GHC.Types.Int -> [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Arity: 2, Strictness: <L,U(U)><L,U(U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w4 :: GHC.Types.Int) ->
                 case Tetris.$wmagframe w w4 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   ww1
                   ww2 }) -}
6a6fdd976cdff36795549c07640b4511
  minbl :: Tetris.Figure -> Tetris.Figure
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U,U,1*U(1*U(U),U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.Figure) ->
                 case ds of wild { Tetris.Figure s t u ->
                 Tetris.Figure
                   s
                   t
                   (case u of wild1 { Tetris.Coord ds1 ds2 ds3 ->
                    Tetris.Coord
                      (case ds1 of wild2 { GHC.Types.I# x1 ->
                       GHC.Types.I# (GHC.Prim.-# x1 30#) })
                      ds2
                      ds3 }) }) -}
f94f9aced463426cb850d6dc38208b49
  mouseToCell ::
    Graphics.Gloss.Internals.Data.Picture.Point
    -> Tetris.GameState -> Tetris.GameState
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),U(U))><S,1*U(U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Graphics.Gloss.Internals.Data.Picture.Point)
                   (w4 :: Tetris.GameState) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.F# ww4 ->
                 case w4 of ww5 { Tetris.GameState ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.gtFloat# ww4 34.0#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.gtFloat# ww4 101.0#) of wild1 {
                        GHC.Types.False -> Tetris.GameState ww6 ww7 ww8 ww9 ww10 ww11 ww12
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.ltFloat# ww4 148.0#) of wild2 {
                             GHC.Types.False -> Tetris.GameState ww6 ww7 ww8 ww9 ww10 ww11 ww12
                             GHC.Types.True
                             -> case ww2 of wild3 { GHC.Types.F# x1 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.gtFloat# x1 250.0#) of wild4 {
                                  GHC.Types.False -> Tetris.GameState ww6 ww7 ww8 ww9 ww10 ww11 ww12
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.ltFloat# x1 290.0#) of wild5 {
                                       GHC.Types.False
                                       -> Tetris.GameState ww6 ww7 ww8 ww9 ww10 ww11 ww12
                                       GHC.Types.True
                                       -> case ww11 of wild6 {
                                            Tetris.TetrisStepped
                                            -> Tetris.GameState
                                                 (GHC.Types.[] @ Tetris.Coord)
                                                 (case ww7 of wild7 {
                                                    [] -> GHC.Types.[] @ Tetris.Figure
                                                    : ds fs -> fs })
                                                 (Tetris.inintTactSmooth, Tetris.transCircleBack)
                                                 Tetris.chMoving1
                                                 ww10
                                                 Tetris.TetrisSmooth
                                                 Tetris.inintTactSmooth
                                            Tetris.TetrisSmooth
                                            -> Tetris.GameState
                                                 (GHC.Types.[] @ Tetris.Coord)
                                                 (case ww7 of wild7 {
                                                    [] -> GHC.Types.[] @ Tetris.Figure
                                                    : ds fs -> fs })
                                                 (Tetris.inintTactStepped, Tetris.transCircleBack)
                                                 Tetris.chMoving1
                                                 ww10
                                                 Tetris.TetrisSmooth
                                                 Tetris.inintTactStepped } } } } } }
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.ltFloat# ww4 100.0#) of wild1 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.gtFloat# ww4 101.0#) of wild2 {
                             GHC.Types.False -> Tetris.GameState ww6 ww7 ww8 ww9 ww10 ww11 ww12
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.ltFloat# ww4 148.0#) of wild3 {
                                  GHC.Types.False -> Tetris.GameState ww6 ww7 ww8 ww9 ww10 ww11 ww12
                                  GHC.Types.True
                                  -> case ww2 of wild4 { GHC.Types.F# x1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.gtFloat# x1 250.0#) of wild5 {
                                       GHC.Types.False
                                       -> Tetris.GameState ww6 ww7 ww8 ww9 ww10 ww11 ww12
                                       GHC.Types.True
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.ltFloat# x1 290.0#) of wild6 {
                                            GHC.Types.False
                                            -> Tetris.GameState ww6 ww7 ww8 ww9 ww10 ww11 ww12
                                            GHC.Types.True
                                            -> case ww11 of wild7 {
                                                 Tetris.TetrisStepped
                                                 -> Tetris.GameState
                                                      (GHC.Types.[] @ Tetris.Coord)
                                                      (case ww7 of wild8 {
                                                         [] -> GHC.Types.[] @ Tetris.Figure
                                                         : ds fs -> fs })
                                                      (Tetris.inintTactSmooth,
                                                       Tetris.transCircleBack)
                                                      Tetris.chMoving1
                                                      ww10
                                                      Tetris.TetrisSmooth
                                                      Tetris.inintTactSmooth
                                                 Tetris.TetrisSmooth
                                                 -> Tetris.GameState
                                                      (GHC.Types.[] @ Tetris.Coord)
                                                      (case ww7 of wild8 {
                                                         [] -> GHC.Types.[] @ Tetris.Figure
                                                         : ds fs -> fs })
                                                      (Tetris.inintTactStepped,
                                                       Tetris.transCircleBack)
                                                      Tetris.chMoving1
                                                      ww10
                                                      Tetris.TetrisSmooth
                                                      Tetris.inintTactStepped } } } } } }
                        GHC.Types.True
                        -> case ww2 of wild2 { GHC.Types.F# x1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.gtFloat# x1 250.0#) of wild3 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.gtFloat# ww4 101.0#) of wild4 {
                                  GHC.Types.False -> Tetris.GameState ww6 ww7 ww8 ww9 ww10 ww11 ww12
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.ltFloat# ww4 148.0#) of wild5 {
                                       GHC.Types.False
                                       -> Tetris.GameState ww6 ww7 ww8 ww9 ww10 ww11 ww12
                                       GHC.Types.True
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.gtFloat# x1 250.0#) of wild6 {
                                            GHC.Types.False
                                            -> Tetris.GameState ww6 ww7 ww8 ww9 ww10 ww11 ww12
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.ltFloat# x1 290.0#) of wild7 {
                                                 GHC.Types.False
                                                 -> Tetris.GameState ww6 ww7 ww8 ww9 ww10 ww11 ww12
                                                 GHC.Types.True
                                                 -> case ww11 of wild8 {
                                                      Tetris.TetrisStepped
                                                      -> Tetris.GameState
                                                           (GHC.Types.[] @ Tetris.Coord)
                                                           (case ww7 of wild9 {
                                                              [] -> GHC.Types.[] @ Tetris.Figure
                                                              : ds fs -> fs })
                                                           (Tetris.inintTactSmooth,
                                                            Tetris.transCircleBack)
                                                           Tetris.chMoving1
                                                           ww10
                                                           Tetris.TetrisSmooth
                                                           Tetris.inintTactSmooth
                                                      Tetris.TetrisSmooth
                                                      -> Tetris.GameState
                                                           (GHC.Types.[] @ Tetris.Coord)
                                                           (case ww7 of wild9 {
                                                              [] -> GHC.Types.[] @ Tetris.Figure
                                                              : ds fs -> fs })
                                                           (Tetris.inintTactStepped,
                                                            Tetris.transCircleBack)
                                                           Tetris.chMoving1
                                                           ww10
                                                           Tetris.TetrisSmooth
                                                           Tetris.inintTactStepped } } } } }
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.ltFloat# x1 290.0#) of wild4 {
                                  GHC.Types.False
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.gtFloat# ww4 101.0#) of wild5 {
                                       GHC.Types.False
                                       -> Tetris.GameState ww6 ww7 ww8 ww9 ww10 ww11 ww12
                                       GHC.Types.True
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.ltFloat# ww4 148.0#) of wild6 {
                                            GHC.Types.False
                                            -> Tetris.GameState ww6 ww7 ww8 ww9 ww10 ww11 ww12
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.gtFloat# x1 250.0#) of wild7 {
                                                 GHC.Types.False
                                                 -> Tetris.GameState ww6 ww7 ww8 ww9 ww10 ww11 ww12
                                                 GHC.Types.True
                                                 -> case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.ltFloat# x1 290.0#) of wild8 {
                                                      GHC.Types.False
                                                      -> Tetris.GameState
                                                           ww6
                                                           ww7
                                                           ww8
                                                           ww9
                                                           ww10
                                                           ww11
                                                           ww12
                                                      GHC.Types.True
                                                      -> case ww11 of wild9 {
                                                           Tetris.TetrisStepped
                                                           -> Tetris.GameState
                                                                (GHC.Types.[] @ Tetris.Coord)
                                                                (case ww7 of wild10 {
                                                                   []
                                                                   -> GHC.Types.[] @ Tetris.Figure
                                                                   : ds fs -> fs })
                                                                (Tetris.inintTactSmooth,
                                                                 Tetris.transCircleBack)
                                                                Tetris.chMoving1
                                                                ww10
                                                                Tetris.TetrisSmooth
                                                                Tetris.inintTactSmooth
                                                           Tetris.TetrisSmooth
                                                           -> Tetris.GameState
                                                                (GHC.Types.[] @ Tetris.Coord)
                                                                (case ww7 of wild10 {
                                                                   []
                                                                   -> GHC.Types.[] @ Tetris.Figure
                                                                   : ds fs -> fs })
                                                                (Tetris.inintTactStepped,
                                                                 Tetris.transCircleBack)
                                                                Tetris.chMoving1
                                                                ww10
                                                                Tetris.TetrisSmooth
                                                                Tetris.inintTactStepped } } } } }
                                  GHC.Types.True
                                  -> Tetris.GameState
                                       ww6
                                       ww7
                                       ww8
                                       ww9
                                       (case ww10 of wild5 {
                                          Tetris.TetrisRect -> Tetris.TetrisRound
                                          Tetris.TetrisRound -> Tetris.TetrisRect })
                                       ww11
                                       ww12 } } } } } } } }) -}
3bcf884a69a50e0f54ec189ce43b49b1
  moveLeft :: Tetris.GameState -> Tetris.GameState
  {- Arity: 1, Strictness: <S(LLLLLSL),1*U(U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.GameState) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case Tetris.$wmoveLeft
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7 of ww8 { (#,,,,,,#) ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Tetris.GameState ww9 ww10 ww11 ww12 ww13 ww14 ww15 } }) -}
5ff3e6863d593a0f8fae2688147092c2
  moveLeftSmoothRect :: Tetris.GameState -> Tetris.GameState
  {- Arity: 1, Strictness: <S(LSLLLLL),U(U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.GameState) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case Tetris.$wmoveLeftSmoothRect
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7 of ww8 { (#,,,,,,#) ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Tetris.GameState ww9 ww10 ww11 ww12 ww13 ww14 ww15 } }) -}
e5e8d234cab8490a06b514243f9d0229
  moveLeftSmoothRound :: Tetris.GameState -> Tetris.GameState
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.GameState) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Tetris.GameState
                   ww1
                   (GHC.Types.:
                      @ Tetris.Figure
                      (case ww2 of wild {
                         []
                         -> Tetris.Figure
                              Tetris.T
                              Tetris.DUp
                              (Tetris.Coord
                                 (case Tetris.drawFigure3 of wild1 { GHC.Types.I# x1 ->
                                  GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                 Tetris.glob_fps
                                 Tetris.chMoving1)
                         : f ds
                         -> case f of wild1 { Tetris.Figure s t u ->
                            Tetris.Figure
                              s
                              t
                              (case u of wild2 { Tetris.Coord ds1 ds2 ds3 ->
                               Tetris.Coord
                                 (case ds1 of wild3 { GHC.Types.I# x1 ->
                                  GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                 ds2
                                 ds3 }) } })
                      (case ww2 of wild {
                         [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs }))
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
196bfa34923c72dcb5b3576e587c8303
  moveLeftSteppedRect :: Tetris.GameState -> Tetris.GameState
  {- Arity: 1, Strictness: <S(LSLLLLL),U(U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.GameState) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case Tetris.$wmoveLeftSteppedRect
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7 of ww8 { (#,,,,,,#) ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Tetris.GameState ww9 ww10 ww11 ww12 ww13 ww14 ww15 } }) -}
8ae0f173f72e942b5d10f8c9abdf4441
  moveLeftSteppedRound :: Tetris.GameState -> Tetris.GameState
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.GameState) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Tetris.GameState
                   ww1
                   (GHC.Types.:
                      @ Tetris.Figure
                      (case ww2 of wild {
                         []
                         -> Tetris.Figure
                              Tetris.T
                              Tetris.DUp
                              (Tetris.Coord
                                 (case Tetris.drawFigure3 of wild1 { GHC.Types.I# x1 ->
                                  GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                 Tetris.glob_fps
                                 Tetris.chMoving1)
                         : f ds
                         -> case f of wild1 { Tetris.Figure s t u ->
                            Tetris.Figure
                              s
                              t
                              (case u of wild2 { Tetris.Coord ds1 ds2 ds3 ->
                               Tetris.Coord
                                 (case ds1 of wild3 { GHC.Types.I# x1 ->
                                  GHC.Types.I# (GHC.Prim.-# x1 30#) })
                                 ds2
                                 ds3 }) } })
                      (case ww2 of wild {
                         [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs }))
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
0b79c2fbad63862ae17bda544f76500d
  moveRight :: Tetris.GameState -> Tetris.GameState
  {- Arity: 1, Strictness: <S(LLLLLSL),1*U(U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.GameState) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case Tetris.$wmoveRight
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7 of ww8 { (#,,,,,,#) ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Tetris.GameState ww9 ww10 ww11 ww12 ww13 ww14 ww15 } }) -}
cf5b621c41de5975b7eafe41d987eb6a
  moveRightSmoothRect :: Tetris.GameState -> Tetris.GameState
  {- Arity: 1, Strictness: <S(LSLLLLL),U(U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.GameState) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case Tetris.$wmoveRightSmoothRect
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7 of ww8 { (#,,,,,,#) ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Tetris.GameState ww9 ww10 ww11 ww12 ww13 ww14 ww15 } }) -}
7d8bb4103fd3ea0c6c2f023666c99fe7
  moveRightSmoothRound :: Tetris.GameState -> Tetris.GameState
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.GameState) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Tetris.GameState
                   ww1
                   (GHC.Types.:
                      @ Tetris.Figure
                      (case ww2 of wild {
                         []
                         -> Tetris.Figure
                              Tetris.T
                              Tetris.DUp
                              (Tetris.Coord
                                 (case Tetris.drawFigure3 of wild1 { GHC.Types.I# x1 ->
                                  GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                 Tetris.glob_fps
                                 Tetris.chMoving1)
                         : f ds
                         -> case f of wild1 { Tetris.Figure s t u ->
                            Tetris.Figure
                              s
                              t
                              (case u of wild2 { Tetris.Coord ds1 ds2 ds3 ->
                               Tetris.Coord
                                 (case ds1 of wild3 { GHC.Types.I# x1 ->
                                  GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                 ds2
                                 ds3 }) } })
                      (case ww2 of wild {
                         [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs }))
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
475d32e20f527c81ada4875796883db0
  moveRightSteppedRect :: Tetris.GameState -> Tetris.GameState
  {- Arity: 1, Strictness: <S(LSLLLLL),U(U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.GameState) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case Tetris.$wmoveRightSteppedRect
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7 of ww8 { (#,,,,,,#) ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Tetris.GameState ww9 ww10 ww11 ww12 ww13 ww14 ww15 } }) -}
1c4822cde2ef2d38887a5673f72c8fc4
  moveRightSteppedRound :: Tetris.GameState -> Tetris.GameState
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.GameState) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Tetris.GameState
                   ww1
                   (GHC.Types.:
                      @ Tetris.Figure
                      (case ww2 of wild {
                         []
                         -> Tetris.Figure
                              Tetris.T
                              Tetris.DUp
                              (Tetris.Coord
                                 (case Tetris.drawFigure3 of wild1 { GHC.Types.I# x1 ->
                                  GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                 Tetris.glob_fps
                                 Tetris.chMoving1)
                         : f ds
                         -> case f of wild1 { Tetris.Figure s t u ->
                            Tetris.Figure
                              s
                              t
                              (case u of wild2 { Tetris.Coord ds1 ds2 ds3 ->
                               Tetris.Coord
                                 (case ds1 of wild3 { GHC.Types.I# x1 ->
                                  GHC.Types.I# (GHC.Prim.+# x1 30#) })
                                 ds2
                                 ds3 }) } })
                      (case ww2 of wild {
                         [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs }))
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
88823b038b2e3d94127516c3389cea47
  mul8or9 :: Tetris.Figure -> Tetris.Figure
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(U,U,1*U(A,U,U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.Figure) ->
                 case w of ww { Tetris.Figure ww1 ww2 ww3 ->
                 case Tetris.$wmul8or9 ww1 ww2 ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Tetris.Figure ww5 ww6 ww7 } }) -}
771c5d5030094a0bc5ddfc5ca467b7e3
  myscale :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 2.3#) -}
82b6cbf361d619aa8d1898d99b40e809
  newLevel :: Tetris.GameState -> Tetris.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLS(S)LLL),1*U(U,U,U(U(U),U),U(U),U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.GameState) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww4 of ww8 { GHC.Types.I# ww9 ->
                 case Tetris.$wnewLevel
                        ww1
                        ww2
                        ww3
                        ww9
                        ww5
                        ww6
                        ww7 of ww10 { (#,,,,,,#) ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 Tetris.GameState ww11 ww12 ww13 ww14 ww15 ww16 ww17 } } }) -}
a9a3fc308dc422f5a1b550f3cc77946b
  newTact ::
    Tetris.GameState
    -> GHC.Types.Float -> GHC.Types.Float -> Tetris.GameState
  {- Arity: 3,
     Strictness: <S(LLS(S(S)L)LLSL),1*U(U,U,U(U(U),U(U)),U(U),U,U,U)><L,U(U)><L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Tetris.GameState)
                   (w4 :: GHC.Types.Float)
                   (w5 :: GHC.Types.Float) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww3 of ww8 { (,) ww9 ww10 ->
                 case ww9 of ww11 { GHC.Types.F# ww12 ->
                 case Tetris.$wnewTact
                        ww1
                        ww2
                        ww12
                        ww10
                        ww4
                        ww5
                        ww6
                        ww7
                        w4
                        w5 of ww13 { (#,,,,,,#) ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 Tetris.GameState ww14 ww15 ww16 ww17 ww18 ww19 ww20 } } } }) -}
50c64f55706da7f5a61c7a116fe213d0
  newTactSmooth ::
    Tetris.GameState
    -> GHC.Types.Float -> GHC.Types.Float -> Tetris.GameState
  {- Arity: 3,
     Strictness: <S(LLS(S(S)L)LLLL),1*U(U,U,U(U(U),U(U)),U(U),U,U,U)><L,U(U)><L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Tetris.GameState)
                   (w4 :: GHC.Types.Float)
                   (w5 :: GHC.Types.Float) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww3 of ww8 { (,) ww9 ww10 ->
                 case ww9 of ww11 { GHC.Types.F# ww12 ->
                 case Tetris.$wnewTactSmooth
                        ww1
                        ww2
                        ww12
                        ww10
                        ww4
                        ww5
                        ww6
                        ww7
                        w4
                        w5 of ww13 { (#,,,,,,#) ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 Tetris.GameState ww14 ww15 ww16 ww17 ww18 ww19 ww20 } } } }) -}
5edeed555517bca8d208490ef077d054
  newTactStepped ::
    Tetris.GameState
    -> GHC.Types.Float -> GHC.Types.Float -> Tetris.GameState
  {- Arity: 3,
     Strictness: <S(LLS(S(S)L)LLLL),1*U(U,U,U(U(U),U(U)),U(U),U,U,U)><L,U(U)><L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Tetris.GameState)
                   (w4 :: GHC.Types.Float)
                   (w5 :: GHC.Types.Float) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww3 of ww8 { (,) ww9 ww10 ->
                 case ww9 of ww11 { GHC.Types.F# ww12 ->
                 case Tetris.$wnewTactStepped
                        ww1
                        ww2
                        ww12
                        ww10
                        ww4
                        ww5
                        ww6
                        ww7
                        w4
                        w5 of ww13 { (#,,,,,,#) ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 Tetris.GameState ww14 ww15 ww16 ww17 ww18 ww19 ww20 } } } }) -}
739ad276ea72cc3f614576b66df4f592
  numtocolor ::
    GHC.Types.Int -> Graphics.Gloss.Internals.Data.Color.Color
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Int) ->
                 case ds of wild { GHC.Types.I# ds1 ->
                 case ds1 of ds2 {
                   DEFAULT -> Graphics.Gloss.Data.Color.white
                   0# -> Graphics.Gloss.Data.Color.azure
                   1# -> Graphics.Gloss.Data.Color.blue
                   2# -> Graphics.Gloss.Data.Color.yellow
                   3# -> Graphics.Gloss.Data.Color.red
                   4# -> Graphics.Gloss.Data.Color.green
                   5# -> Graphics.Gloss.Data.Color.orange } }) -}
89c5423ad0f4f8757d5f3084f50cef6c
  offsedge :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 15#) -}
d3a30693df0fe7c70250182c67159c5b
  offset2 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 100.0#) -}
26e79a81930dd0bc48a0105c220a3623
  onMoveButton ::
    Graphics.Gloss.Internals.Data.Picture.Point
    -> (GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
        GHC.Types.Float)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)LLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Graphics.Gloss.Internals.Data.Picture.Point)
                   (w4 :: (GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
                           GHC.Types.Float)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.F# ww4 ->
                 case w4 of ww5 { (,,,) ww6 ww7 ww8 ww9 ->
                 case ww6 of ww10 { GHC.Types.F# ww11 ->
                 Tetris.$wonMoveButton ww4 ww2 ww11 ww7 ww8 ww9 } } } }) -}
59b09f94a99251f5302e2c34be6f481b
  onTypeButton ::
    Graphics.Gloss.Internals.Data.Picture.Point
    -> (GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
        GHC.Types.Float)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)LLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Graphics.Gloss.Internals.Data.Picture.Point)
                   (w4 :: (GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
                           GHC.Types.Float)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.F# ww4 ->
                 case w4 of ww5 { (,,,) ww6 ww7 ww8 ww9 ->
                 case ww6 of ww10 { GHC.Types.F# ww11 ->
                 Tetris.$wonTypeButton ww4 ww2 ww11 ww7 ww8 ww9 } } } }) -}
7f25e4935f8d056b2d9471578e9fef00
  pause :: (Tetris.Speed, Tetris.Time) -> (Tetris.Speed, Tetris.Time)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U(U),U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Tetris.Speed, Tetris.Time)) ->
                 case ds of wild { (,) sp ti -> (GHC.Float.negateFloat sp, ti) }) -}
27b6ce6aa1550ad4b91306af07507cb7
  plbl :: Tetris.Figure -> Tetris.Figure
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U,U,1*U(1*U(U),U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.Figure) ->
                 case ds of wild { Tetris.Figure s t u ->
                 Tetris.Figure
                   s
                   t
                   (case u of wild1 { Tetris.Coord ds1 ds2 ds3 ->
                    Tetris.Coord
                      (case ds1 of wild2 { GHC.Types.I# x1 ->
                       GHC.Types.I# (GHC.Prim.+# x1 30#) })
                      ds2
                      ds3 }) }) -}
0f390c45350b3cb4dbb15da0fa1cf63b
  plbly :: Tetris.Figure -> Tetris.Figure
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U,U,1*U(U,1*U(U),U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.Figure) ->
                 case ds of wild { Tetris.Figure s t u ->
                 Tetris.Figure
                   s
                   t
                   (case u of wild1 { Tetris.Coord ds1 ds2 ds3 ->
                    Tetris.Coord
                      ds1
                      (case ds2 of wild2 { GHC.Types.I# x1 ->
                       GHC.Types.I# (GHC.Prim.+# x1 30#) })
                      ds3 }) }) -}
0974e48bed30ded2e5b0be795190ee86
  pldtSpeedAndTime ::
    (Tetris.Speed, Tetris.Time)
    -> GHC.Types.Float -> (Tetris.Speed, Tetris.Time)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U,1*U(U))><L,1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: (Tetris.Speed, Tetris.Time)) (dt :: GHC.Types.Float) ->
                 case ds of wild { (,) sp ti ->
                 (sp, GHC.Float.plusFloat ti dt) }) -}
2716a399fa6d718c5b487c3f8284927e
  ploy :: Tetris.Figure -> Tetris.Figure
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U,U,1*U(U,1*U(U),U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.Figure) ->
                 case ds of wild { Tetris.Figure s t u ->
                 Tetris.Figure
                   s
                   t
                   (case u of wild1 { Tetris.Coord ds1 ds2 ds3 ->
                    Tetris.Coord
                      ds1
                      (case ds2 of wild2 { GHC.Types.I# x1 ->
                       GHC.Types.I# (GHC.Prim.+# x1 1#) })
                      ds3 }) }) -}
535d1a9192e5d901e19f3aac14b8e60a
  rect ::
    Graphics.Gloss.Internals.Data.Picture.Point
    -> Graphics.Gloss.Internals.Data.Picture.Point
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,U)><S,1*U(U,U)>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Graphics.Gloss.Internals.Data.Picture.Point)
                   (w4 :: Graphics.Gloss.Internals.Data.Picture.Point) ->
                 case w of ww { (,) ww1 ww2 ->
                 case w4 of ww3 { (,) ww4 ww5 ->
                 Graphics.Gloss.Internals.Data.Picture.Polygon
                   (GHC.Types.:
                      @ Graphics.Gloss.Internals.Data.Picture.Point
                      (ww1, ww2)
                      (GHC.Types.:
                         @ Graphics.Gloss.Internals.Data.Picture.Point
                         (ww1, ww5)
                         (GHC.Types.:
                            @ Graphics.Gloss.Internals.Data.Picture.Point
                            (ww4, ww5)
                            (GHC.Types.:
                               @ Graphics.Gloss.Internals.Data.Picture.Point
                               (ww4, ww2)
                               (GHC.Types.[]
                                  @ Graphics.Gloss.Internals.Data.Picture.Point))))) } }) -}
e6c7c67c0863d257d7cf1423ebb3c8b3
  rest :: [Tetris.Figure] -> [Tetris.Figure]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: [Tetris.Figure]) ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ Tetris.Figure : ds1 fs -> fs }) -}
b0d7c9693c901ff317b7bce605ae9984
  roundedRect ::
    Graphics.Gloss.Internals.Data.Color.Color
    -> Graphics.Gloss.Internals.Data.Color.Color
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U(U)><L,U(U)><L,U(U)><L,U(U)>m14,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: Graphics.Gloss.Internals.Data.Color.Color)
                   (w4 :: Graphics.Gloss.Internals.Data.Color.Color)
                   (w5 :: GHC.Types.Float)
                   (w6 :: GHC.Types.Float)
                   (w7 :: GHC.Types.Float)
                   (w8 :: GHC.Types.Float) ->
                 case Tetris.$wroundedRect w w4 w5 w6 w7 w8 of ww { Unit# ww1 ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures ww1 }) -}
88f6812a9467e21978928d4ca239ff6d
  row :: Tetris.Board -> GHC.Types.Int -> [Tetris.Coord]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (b :: Tetris.Board) (n :: GHC.Types.Int) ->
                 GHC.Base.build
                   @ Tetris.Coord
                   (\ @ b1
                      (c :: Tetris.Coord -> b1 -> b1)[OneShot]
                      (n1 :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ Tetris.Coord
                      @ b1
                      (GHC.List.filterFB
                         @ Tetris.Coord
                         @ b1
                         c
                         (\ (b2 :: Tetris.Coord) ->
                          case b2 of wild { Tetris.Coord ds ds1 ds2 ->
                          GHC.Classes.eqInt n ds1 }))
                      n1
                      b)) -}
9a807b7c99b7396e1b286539a0791fbf
  run :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Tetris.run1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
d20885b7eddd35c5b82632e6f93c332e
  run1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, System.Random.StdGen)
                        @ System.Random.StdGen
                        r#
                        System.Random.newStdGen2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { System.Random.StdGen ipv2 ipv3 ->
                 case Graphics.Gloss.Internals.Interface.Game.playWithBackendIO1
                        @ Tetris.GameState
                        @ Graphics.Gloss.Internals.Interface.Backend.GLUT.GLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.$fBackendGLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.$fBackendGLUTState_$cinitBackendState
                        Tetris.run5
                        Graphics.Gloss.Data.Color.black
                        Tetris.glob_fps
                        (Tetris.GameState
                           (GHC.Types.[] @ Tetris.Coord)
                           (Tetris.initFigures_go b1)
                           Tetris.genUniverse1
                           Tetris.chMoving1
                           Tetris.TetrisRect
                           Tetris.TetrisStepped
                           Tetris.inintTactStepped)
                        Tetris.run4
                          `cast`
                        (<Tetris.GameState>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Graphics.Gloss.Internals.Data.Picture.Picture>_R))
                        Tetris.run3
                          `cast`
                        (<Graphics.Gloss.Internals.Interface.Event.Event>_R
                         ->_R <Tetris.GameState>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Tetris.GameState>_R))
                        Tetris.run2
                          `cast`
                        (<GHC.Types.Float>_R
                         ->_R <Tetris.GameState>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Tetris.GameState>_R))
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv4 ipv5 ->
                 (# ipv4, GHC.Tuple.() #) } } } }) -}
fcbbd5cdbd8681e688fc44fe811b4266
  run2 ::
    GHC.Types.Float
    -> Tetris.GameState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Tetris.GameState #)
  {- Arity: 3,
     Unfolding: (\ (time :: GHC.Types.Float)
                   (world1 :: Tetris.GameState)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Tetris.updateTetris time world1 #)) -}
a0a66188473bb9011e5822283b02fef9
  run3 ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Tetris.GameState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Tetris.GameState #)
  {- Arity: 3,
     Unfolding: (\ (event :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (world1 :: Tetris.GameState)[OneShot]
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Tetris.handleTetris event world1 #)) -}
545ce19d517b86615dea229bafd49895
  run4 ::
    Tetris.GameState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Graphics.Gloss.Internals.Data.Picture.Picture #)
  {- Arity: 2,
     Unfolding: (\ (x1 :: Tetris.GameState)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Tetris.drawTetris x1 #)) -}
31fbdf7c5220fcd9c97245a6522b2734
  run5 :: Graphics.Gloss.Data.Display.Display
  {- Unfolding: (Graphics.Gloss.Data.Display.InWindow
                   Tetris.run8
                   Tetris.run7
                   Tetris.run6) -}
fbf06c9e2c17e4d7daa981bc182dd76e
  run6 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: ((Tetris.chMoving1, Tetris.chMoving1)) -}
0865ed0f00ade55d75836819a2649c58
  run7 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: ((Tetris.screenWidthreal, Tetris.screenWidthreal)) -}
cf722ed461d7a05ead1d85a82f416fc7
  run8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Tetris"#) -}
df6909ecb1f8eb224c1c371cd817090d
  scalCirclB :: GHC.Types.Float
  {- Strictness: m, Unfolding: (Tetris.scaleBackGr) -}
3345b445b7ad1f50e2f503ea4678cc00
  scaleBackGr :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 1.3#) -}
7bce3399d27f9d965a49bb2b09425bc3
  scaleBackGrTwo :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 1.0#) -}
58c8ae3c242e5842c0c637259b9fea0d
  scaleSc :: GHC.Types.Float
  {- Strictness: m, Unfolding: (Tetris.inintTactSmooth) -}
c7c0500481f2d8fe636cfbc7636989a7
  scaleT :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# 8.0e-3#) -}
a2cc90f9e0eaf6035bb36bd02c70ed06
  scaleTSmooth :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 13.0#) -}
649f82f29cc8bf1950e7a72758a7e86b
  score :: Tetris.GameState -> Tetris.Score
  RecSel Left Tetris.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.GameState) ->
                 case ds of wild { Tetris.GameState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds4 }) -}
9045f197ffef0c77e194efe490c74317
  screenHeight :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 600#) -}
4c6143fa7ec733457fb2f2189335309c
  screenHeightFloat :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 600.0#) -}
cfc3d9a9dc76c7a696f4790ff2d16c0c
  screenHeightreal :: GHC.Types.Int
  {- Strictness: m, Unfolding: (Tetris.screenWidthreal) -}
aac7357ed586e6c693706f5a857c64c9
  screenWidth :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 300#) -}
b33fd72e9362b0dd587173feb3eee4a9
  screenWidthFloat :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 300.0#) -}
6b54be3c68cfbce6f0092513ba5c3a5c
  screenWidthreal :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 800#) -}
79e07dfb0179451120bfe4b69044a241
  sizefit :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 5.0#) -}
ab0e5d6634b3333b63b3555ca2b69628
  sizefitInt :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
13af9b684be9843cf62dfee53ec73565
  sortRows :: Tetris.Board -> Tetris.Board
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
fd106808549cbd88b53c29c6ad2a3665
  specangel :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 324.0#) -}
2a8ff04a879f1da6c7109d5b2e1b8db4
  speedandtime :: Tetris.GameState -> (Tetris.Speed, Tetris.Time)
  RecSel Left Tetris.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U(U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.GameState) ->
                 case ds of wild { Tetris.GameState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds3 }) -}
35a0e7c3efcff9ad669c6377794c9ced
  switchTetrisMove :: Tetris.TetrisMove -> Tetris.TetrisMove
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.TetrisMove) ->
                 case ds of wild {
                   Tetris.TetrisStepped -> Tetris.TetrisSmooth
                   Tetris.TetrisSmooth -> Tetris.TetrisStepped }) -}
dd13d3c9427f66569d3d3b37b2233e2b
  switchTetrisType :: Tetris.TetrisType -> Tetris.TetrisType
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.TetrisType) ->
                 case ds of wild {
                   Tetris.TetrisRect -> Tetris.TetrisRound
                   Tetris.TetrisRound -> Tetris.TetrisRect }) -}
9a4bf6af507e1d95e7731f4220eaa387
  tactgamestate :: Tetris.GameState -> Tetris.Time
  RecSel Left Tetris.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.GameState) ->
                 case ds of wild { Tetris.GameState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds7 }) -}
5959d023919fe7c41102b4840689b645
  tetrMoveButton ::
    (GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
     GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Tetris.drawTetris19, Tetris.drawTetris15,
                  Tetris.drawTetris17, Tetris.drawTetris14)) -}
55341f5d2298d16effb89c2e4cca7e61
  tetrTypbutton ::
    (GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
     GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Tetris.drawTetris30, Tetris.offset2,
                  Tetris.drawTetris17, Tetris.drawTetris14)) -}
4731f0281cf28f8800b3c1ffcde018a1
  tetrispause :: Tetris.GameState -> Tetris.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U,U,1*U(1*U(U),U),U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (u :: Tetris.GameState) ->
                 case u of wild { Tetris.GameState ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 Tetris.GameState
                   ds
                   ds1
                   (case ds2 of wild1 { (,) sp ti -> (GHC.Float.negateFloat sp, ti) })
                   ds3
                   ds4
                   ds5
                   ds6 }) -}
f98528df30b9dd3435aa5ef53f00b307
  thicknessOne :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 6.0#) -}
b99aff3561bfcff159437445171ae180
  thicknessTwo :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 2.0#) -}
487c27779409e7a00b8c0ac21d79295d
  toCoord :: Tetris.Coord1 -> Tetris.Coord
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)) ->
                 case ds of wild { (,,) x1 y1 clr1 -> Tetris.Coord x1 y1 clr1 }) -}
bec71313a13ee937d3a8f832734d30f6
  toGS :: Tetris.Gamestate -> Tetris.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(U,U,1*U(U,U),U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Tetris.Board, [Tetris.Figure],
                           (Tetris.Speed, Tetris.Time), Tetris.Score, Tetris.TetrisType,
                           Tetris.TetrisMove, Tetris.Time)) ->
                 case ds of wild { (,,,,,,) board1 figure1 ds1 score1 typerepres1 typemoving1 tactgamestate1 ->
                 case ds1 of wild1 { (,) speed time ->
                 Tetris.GameState
                   board1
                   figure1
                   (speed, time)
                   score1
                   typerepres1
                   typemoving1
                   tactgamestate1 } }) -}
4d35a6bae2a0677c4acd99ef863ab6ec
  tranRectCon :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# -0.3#) -}
ecb0791eacedee0c1baec4d34a9e4cb6
  tranRectConThree :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.1#) -}
78834dbac6c4408ebf25078066aa6e20
  tranRectConTwo :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# 2.0e-2#) -}
c0398bb8f134d9d9d6cd219f9182cf5e
  transCircleBack :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
5de59c9f15e15c309db80a9f61962e5a
  transl :: GHC.Types.Float
  {- Strictness: m, Unfolding: (Tetris.thicknessTwo) -}
2158247df5e16d9189db5ef2857cb4be
  translMenu :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 10.0#) -}
e956f237a9ad06a93b95992b5575455d
  translMenu2 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 15.0#) -}
b99cd7b9f6d351751f42d016ffd1550e
  translateT :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# -1.5#) -}
6ce4640f2b85887e582668a7549b3fe9
  transtBackGround :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# -100.0#) -}
92e412b83436b5eac91b181b54c31d02
  turn :: Tetris.GameState -> Tetris.GameState
  {- Arity: 1, Strictness: <S(LLLLSLL),1*U(U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.GameState) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww5 of wild {
                   Tetris.TetrisRect
                   -> case ww6 of wild1 {
                        Tetris.TetrisStepped
                        -> Tetris.GameState
                             ww1
                             (GHC.Types.:
                                @ Tetris.Figure
                                (case ww2 of wild2 {
                                   [] -> Tetris.Figure Tetris.T Tetris.DRight Tetris.drawFigure2
                                   : f ds
                                   -> case f of wild3 { Tetris.Figure t ds1 c ->
                                      case ds1 of wild4 {
                                        Tetris.DUp -> Tetris.Figure t Tetris.DRight c
                                        Tetris.DDown -> Tetris.Figure t Tetris.DLeft c
                                        Tetris.DLeft -> Tetris.Figure t Tetris.DUp c
                                        Tetris.DRight -> Tetris.Figure t Tetris.DDown c } } })
                                (case ww2 of wild2 {
                                   [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs }))
                             ww3
                             ww4
                             Tetris.TetrisRect
                             Tetris.TetrisStepped
                             ww7
                        Tetris.TetrisSmooth
                        -> Tetris.GameState
                             ww1
                             (GHC.Types.:
                                @ Tetris.Figure
                                (case ww2 of wild2 {
                                   [] -> Tetris.Figure Tetris.T Tetris.DRight Tetris.drawFigure2
                                   : f ds
                                   -> case f of wild3 { Tetris.Figure t ds1 c ->
                                      case ds1 of wild4 {
                                        Tetris.DUp -> Tetris.Figure t Tetris.DRight c
                                        Tetris.DDown -> Tetris.Figure t Tetris.DLeft c
                                        Tetris.DLeft -> Tetris.Figure t Tetris.DUp c
                                        Tetris.DRight -> Tetris.Figure t Tetris.DDown c } } })
                                (case ww2 of wild2 {
                                   [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs }))
                             ww3
                             ww4
                             Tetris.TetrisRect
                             Tetris.TetrisSmooth
                             ww7 }
                   Tetris.TetrisRound
                   -> Tetris.GameState
                        ww1
                        (GHC.Types.:
                           @ Tetris.Figure
                           (case ww2 of wild1 {
                              [] -> Tetris.Figure Tetris.T Tetris.DRight Tetris.drawFigure2
                              : f ds
                              -> case f of wild2 { Tetris.Figure t ds1 c ->
                                 case ds1 of wild3 {
                                   Tetris.DUp -> Tetris.Figure t Tetris.DRight c
                                   Tetris.DDown -> Tetris.Figure t Tetris.DLeft c
                                   Tetris.DLeft -> Tetris.Figure t Tetris.DUp c
                                   Tetris.DRight -> Tetris.Figure t Tetris.DDown c } } })
                           (case ww2 of wild1 {
                              [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs }))
                        ww3
                        ww4
                        Tetris.TetrisRound
                        ww6
                        ww7 } }) -}
9f94e2d3dc4851a3ad563fa96141a321
  turnRound :: Tetris.GameState -> Tetris.GameState
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.GameState) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Tetris.GameState
                   ww1
                   (GHC.Types.:
                      @ Tetris.Figure
                      (case ww2 of wild {
                         [] -> Tetris.Figure Tetris.T Tetris.DRight Tetris.drawFigure2
                         : f ds
                         -> case f of wild1 { Tetris.Figure t ds1 c ->
                            case ds1 of wild2 {
                              Tetris.DUp -> Tetris.Figure t Tetris.DRight c
                              Tetris.DDown -> Tetris.Figure t Tetris.DLeft c
                              Tetris.DLeft -> Tetris.Figure t Tetris.DUp c
                              Tetris.DRight -> Tetris.Figure t Tetris.DDown c } } })
                      (case ww2 of wild {
                         [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs }))
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
cf621658dbebccff13687470893f8003
  turnSmooth :: Tetris.GameState -> Tetris.GameState
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.GameState) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Tetris.GameState
                   ww1
                   (GHC.Types.:
                      @ Tetris.Figure
                      (case ww2 of wild {
                         [] -> Tetris.Figure Tetris.T Tetris.DRight Tetris.drawFigure2
                         : f ds
                         -> case f of wild1 { Tetris.Figure t ds1 c ->
                            case ds1 of wild2 {
                              Tetris.DUp -> Tetris.Figure t Tetris.DRight c
                              Tetris.DDown -> Tetris.Figure t Tetris.DLeft c
                              Tetris.DLeft -> Tetris.Figure t Tetris.DUp c
                              Tetris.DRight -> Tetris.Figure t Tetris.DDown c } } })
                      (case ww2 of wild {
                         [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs }))
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
835f4417e720eaff60a30a6272bec280
  turnStepped :: Tetris.GameState -> Tetris.GameState
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tetris.GameState) ->
                 case w of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Tetris.GameState
                   ww1
                   (GHC.Types.:
                      @ Tetris.Figure
                      (case ww2 of wild {
                         [] -> Tetris.Figure Tetris.T Tetris.DRight Tetris.drawFigure2
                         : f ds
                         -> case f of wild1 { Tetris.Figure t ds1 c ->
                            case ds1 of wild2 {
                              Tetris.DUp -> Tetris.Figure t Tetris.DRight c
                              Tetris.DDown -> Tetris.Figure t Tetris.DLeft c
                              Tetris.DLeft -> Tetris.Figure t Tetris.DUp c
                              Tetris.DRight -> Tetris.Figure t Tetris.DDown c } } })
                      (case ww2 of wild {
                         [] -> GHC.Types.[] @ Tetris.Figure : ds fs -> fs }))
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
07179a2bc8db7b8fcccba34f8939d49f
  typemoving :: Tetris.GameState -> Tetris.TetrisMove
  RecSel Left Tetris.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.GameState) ->
                 case ds of wild { Tetris.GameState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds6 }) -}
aa6d47b35ad78a63c45bcf1d3e0e52a5
  typerepres :: Tetris.GameState -> Tetris.TetrisType
  RecSel Left Tetris.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.GameState) ->
                 case ds of wild { Tetris.GameState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds5 }) -}
39d995ebb16fa1a136ce4a723fb0ba80
  updateBoard :: Tetris.Figure -> Tetris.Board -> Tetris.Board
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U,1*U,U(U(U),U(U),U))><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Tetris.Figure) (w4 :: Tetris.Board) ->
                 case w of ww { Tetris.Figure ww1 ww2 ww3 ->
                 Tetris.$wupdateBoard ww1 ww2 ww3 w4 }) -}
0c26e8fed7e8a7506f7606f830f975a3
  updateTetris ::
    GHC.Types.Float -> Tetris.GameState -> Tetris.GameState
  {- Arity: 2,
     Strictness: <L,U(U)><S(SSLLLSL),1*U(U,U,U(U(U),U(U)),U(U),U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (dt :: GHC.Types.Float) (u :: Tetris.GameState) ->
                 case u of wild { Tetris.GameState ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 case ds5 of wild1 {
                   Tetris.TetrisStepped -> Tetris.updateTetrisStepped dt wild
                   Tetris.TetrisSmooth -> Tetris.updateTetrisSmooth dt wild } }) -}
ff24703df22d32b0ed1ead751d33d7c6
  updateTetrisSmooth ::
    GHC.Types.Float -> Tetris.GameState -> Tetris.GameState
  {- Arity: 2,
     Strictness: <L,U(U)><S(SSLLLSL),U(U,U,U(U(U),U(U)),U(U),U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Float) (w4 :: Tetris.GameState) ->
                 case w4 of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case Tetris.$wupdateTetrisSmooth
                        w
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7 of ww8 { (#,,,,,,#) ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Tetris.GameState ww9 ww10 ww11 ww12 ww13 ww14 ww15 } }) -}
dbf4f3f7bb34d305d41c392acc8673c1
  updateTetrisSmooth1 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs,
     Unfolding: ((Tetris.inintTactSmooth, Tetris.transCircleBack)) -}
fc486d77bd420a32f2e56a70a5768c9a
  updateTetrisStepped ::
    GHC.Types.Float -> Tetris.GameState -> Tetris.GameState
  {- Arity: 2,
     Strictness: <L,U(U)><S(SSLLLSL),U(U,U,U(U(U),U(U)),U(U),U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Float) (w4 :: Tetris.GameState) ->
                 case w4 of ww { Tetris.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case Tetris.$wupdateTetrisStepped
                        w
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7 of ww8 { (#,,,,,,#) ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Tetris.GameState ww9 ww10 ww11 ww12 ww13 ww14 ww15 } }) -}
300d92638c2d120e7a863117a6c889d4
  upperRows :: Tetris.Board -> GHC.Types.Int -> Tetris.Board
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (brd :: Tetris.Board) (scope :: GHC.Types.Int) ->
                 GHC.Base.build
                   @ Tetris.Coord
                   (\ @ b (c :: Tetris.Coord -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ Tetris.Coord
                      @ b
                      (GHC.List.filterFB
                         @ Tetris.Coord
                         @ b
                         c
                         (\ (c1 :: Tetris.Coord) ->
                          case c1 of wild { Tetris.Coord ds ds1 ds2 ->
                          GHC.Classes.ltInt ds1 scope }))
                      n
                      brd)) -}
8d030715deb77588d0547b0de3580abb
  vectolist ::
    (Tetris.Coord, Tetris.Coord, Tetris.Coord, Tetris.Coord)
    -> [Tetris.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Tetris.Coord, Tetris.Coord, Tetris.Coord,
                           Tetris.Coord)) ->
                 case ds of wild { (,,,) a b c d ->
                 GHC.Types.:
                   @ Tetris.Coord
                   a
                   (GHC.Types.:
                      @ Tetris.Coord
                      b
                      (GHC.Types.:
                         @ Tetris.Coord
                         c
                         (GHC.Types.:
                            @ Tetris.Coord
                            d
                            (GHC.Types.[] @ Tetris.Coord)))) }) -}
c40ed2253307a76b97ca85d73b1ce6b4
  x :: Tetris.Coord -> GHC.Types.Int
  RecSel Left Tetris.Coord
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.Coord) ->
                 case ds of wild { Tetris.Coord ds1 ds2 ds3 -> ds1 }) -}
8cd23de15a2ff244e220445ef1d2ee0d
  y :: Tetris.Coord -> GHC.Types.Int
  RecSel Left Tetris.Coord
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tetris.Coord) ->
                 case ds of wild { Tetris.Coord ds1 ds2 ds3 -> ds2 }) -}
instance GHC.Classes.Eq [Tetris.Block] = Tetris.$fEqBlock
instance GHC.Classes.Eq [Tetris.Direction] = Tetris.$fEqDirection
instance GHC.Classes.Eq [Tetris.FigureType] = Tetris.$fEqFigureType
instance GHC.Classes.Eq [Tetris.TetrisMove] = Tetris.$fEqTetrisMove
instance GHC.Classes.Eq [Tetris.TetrisType] = Tetris.$fEqTetrisType
instance GHC.Show.Show [Tetris.Block] = Tetris.$fShowBlock
instance GHC.Show.Show [Tetris.Direction] = Tetris.$fShowDirection
instance GHC.Show.Show [Tetris.FigureType]
  = Tetris.$fShowFigureType
instance GHC.Show.Show [Tetris.TetrisMove]
  = Tetris.$fShowTetrisMove
instance GHC.Show.Show [Tetris.TetrisType]
  = Tetris.$fShowTetrisType
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

